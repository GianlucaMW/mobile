
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.1
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.1",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.ClienteScalarFieldEnum = {
  cliente_id: 'cliente_id',
  cpfCnpj: 'cpfCnpj',
  email: 'email',
  nome: 'nome',
  telefone: 'telefone',
  endereco: 'endereco',
  numero: 'numero'
};

exports.Prisma.ContaScalarFieldEnum = {
  id_conta: 'id_conta',
  nome: 'nome',
  Saldo: 'Saldo'
};

exports.Prisma.DocumentoScalarFieldEnum = {
  doc_controle: 'doc_controle',
  usuarioId: 'usuarioId',
  id_cliente: 'id_cliente',
  valor: 'valor',
  contaId_conta: 'contaId_conta'
};

exports.Prisma.Fin_pagoScalarFieldEnum = {
  pago_id: 'pago_id',
  Fin_id: 'Fin_id',
  usuarioId: 'usuarioId',
  dt_pago: 'dt_pago',
  val_desc: 'val_desc',
  val_juros: 'val_juros'
};

exports.Prisma.FinanceiroScalarFieldEnum = {
  fin_id: 'fin_id',
  Cliente_id: 'Cliente_id',
  documentoDoc_controle: 'documentoDoc_controle',
  usuarioId: 'usuarioId',
  dt_create: 'dt_create',
  dt_vencimento: 'dt_vencimento',
  pago: 'pago',
  cancelado: 'cancelado',
  valor: 'valor'
};

exports.Prisma.MovimentacaoScalarFieldEnum = {
  mov_id: 'mov_id',
  descricao: 'descricao',
  entrada: 'entrada',
  saida: 'saida',
  quantidade: 'quantidade'
};

exports.Prisma.ProdutoScalarFieldEnum = {
  id_produto: 'id_produto',
  cod_barras: 'cod_barras',
  descricao: 'descricao',
  valor_v: 'valor_v',
  valor_c: 'valor_c',
  estoque: 'estoque'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  senha: 'senha'
};


exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  Conta: 'Conta',
  Produto: 'Produto',
  Documento: 'Documento',
  cliente: 'cliente',
  Financeiro: 'Financeiro',
  Fin_pago: 'Fin_pago',
  Movimentacao: 'Movimentacao'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
