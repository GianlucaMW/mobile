
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = {
  id: number
  nome: string
  senha: string
}

/**
 * Model Conta
 * 
 */
export type Conta = {
  id_conta: number
  nome: string
  Saldo: Prisma.Decimal
}

/**
 * Model Produto
 * 
 */
export type Produto = {
  id_produto: number
  cod_barras: string
  descricao: string
  valor_v: Prisma.Decimal
  valor_c: Prisma.Decimal
  estoque: number
}

/**
 * Model Documento
 * 
 */
export type Documento = {
  doc_controle: number
  usuarioId: number
  id_cliente: number
  valor: Prisma.Decimal
  contaId_conta: number
}

/**
 * Model cliente
 * 
 */
export type cliente = {
  cliente_id: number
  cpfCnpj: string
  email: string
  nome: string
  telefone: string
  endereco: string
  numero: number
}

/**
 * Model Financeiro
 * 
 */
export type Financeiro = {
  fin_id: number
  Cliente_id: number
  documentoDoc_controle: number
  usuarioId: number
  dt_create: Date
  dt_vencimento: Date
  pago: boolean
  cancelado: boolean
  valor: Prisma.Decimal
}

/**
 * Model Fin_pago
 * 
 */
export type Fin_pago = {
  pago_id: number
  Fin_id: number
  usuarioId: number
  dt_pago: Date
  val_desc: Prisma.Decimal
  val_juros: Prisma.Decimal
}

/**
 * Model Movimentacao
 * 
 */
export type Movimentacao = {
  mov_id: number
  descricao: string
  entrada: boolean
  saida: boolean
  quantidade: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<GlobalReject>;

  /**
   * `prisma.conta`: Exposes CRUD operations for the **Conta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contas
    * const contas = await prisma.conta.findMany()
    * ```
    */
  get conta(): Prisma.ContaDelegate<GlobalReject>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.ProdutoDelegate<GlobalReject>;

  /**
   * `prisma.documento`: Exposes CRUD operations for the **Documento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documentos
    * const documentos = await prisma.documento.findMany()
    * ```
    */
  get documento(): Prisma.DocumentoDelegate<GlobalReject>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.clienteDelegate<GlobalReject>;

  /**
   * `prisma.financeiro`: Exposes CRUD operations for the **Financeiro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Financeiros
    * const financeiros = await prisma.financeiro.findMany()
    * ```
    */
  get financeiro(): Prisma.FinanceiroDelegate<GlobalReject>;

  /**
   * `prisma.fin_pago`: Exposes CRUD operations for the **Fin_pago** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fin_pagos
    * const fin_pagos = await prisma.fin_pago.findMany()
    * ```
    */
  get fin_pago(): Prisma.Fin_pagoDelegate<GlobalReject>;

  /**
   * `prisma.movimentacao`: Exposes CRUD operations for the **Movimentacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movimentacaos
    * const movimentacaos = await prisma.movimentacao.findMany()
    * ```
    */
  get movimentacao(): Prisma.MovimentacaoDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Conta: 'Conta',
    Produto: 'Produto',
    Documento: 'Documento',
    cliente: 'cliente',
    Financeiro: 'Financeiro',
    Fin_pago: 'Fin_pago',
    Movimentacao: 'Movimentacao'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */


  export type UsuarioCountOutputType = {
    Financeiro: number
    Fin_pago: number
    Documento: number
  }

  export type UsuarioCountOutputTypeSelect = {
    Financeiro?: boolean
    Fin_pago?: boolean
    Documento?: boolean
  }

  export type UsuarioCountOutputTypeGetPayload<S extends boolean | null | undefined | UsuarioCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsuarioCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsuarioCountOutputTypeArgs)
    ? UsuarioCountOutputType 
    : S extends { select: any } & (UsuarioCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsuarioCountOutputType ? UsuarioCountOutputType[P] : never
  } 
      : UsuarioCountOutputType




  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect | null
  }



  /**
   * Count Type ContaCountOutputType
   */


  export type ContaCountOutputType = {
    Documento: number
  }

  export type ContaCountOutputTypeSelect = {
    Documento?: boolean
  }

  export type ContaCountOutputTypeGetPayload<S extends boolean | null | undefined | ContaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ContaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ContaCountOutputTypeArgs)
    ? ContaCountOutputType 
    : S extends { select: any } & (ContaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ContaCountOutputType ? ContaCountOutputType[P] : never
  } 
      : ContaCountOutputType




  // Custom InputTypes

  /**
   * ContaCountOutputType without action
   */
  export type ContaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ContaCountOutputType
     */
    select?: ContaCountOutputTypeSelect | null
  }



  /**
   * Count Type DocumentoCountOutputType
   */


  export type DocumentoCountOutputType = {
    Financeiro: number
  }

  export type DocumentoCountOutputTypeSelect = {
    Financeiro?: boolean
  }

  export type DocumentoCountOutputTypeGetPayload<S extends boolean | null | undefined | DocumentoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DocumentoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DocumentoCountOutputTypeArgs)
    ? DocumentoCountOutputType 
    : S extends { select: any } & (DocumentoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DocumentoCountOutputType ? DocumentoCountOutputType[P] : never
  } 
      : DocumentoCountOutputType




  // Custom InputTypes

  /**
   * DocumentoCountOutputType without action
   */
  export type DocumentoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DocumentoCountOutputType
     */
    select?: DocumentoCountOutputTypeSelect | null
  }



  /**
   * Count Type ClienteCountOutputType
   */


  export type ClienteCountOutputType = {
    Financeiro: number
  }

  export type ClienteCountOutputTypeSelect = {
    Financeiro?: boolean
  }

  export type ClienteCountOutputTypeGetPayload<S extends boolean | null | undefined | ClienteCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClienteCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClienteCountOutputTypeArgs)
    ? ClienteCountOutputType 
    : S extends { select: any } & (ClienteCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ClienteCountOutputType ? ClienteCountOutputType[P] : never
  } 
      : ClienteCountOutputType




  // Custom InputTypes

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect | null
  }



  /**
   * Count Type FinanceiroCountOutputType
   */


  export type FinanceiroCountOutputType = {
    Fin_pago: number
  }

  export type FinanceiroCountOutputTypeSelect = {
    Fin_pago?: boolean
  }

  export type FinanceiroCountOutputTypeGetPayload<S extends boolean | null | undefined | FinanceiroCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FinanceiroCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FinanceiroCountOutputTypeArgs)
    ? FinanceiroCountOutputType 
    : S extends { select: any } & (FinanceiroCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FinanceiroCountOutputType ? FinanceiroCountOutputType[P] : never
  } 
      : FinanceiroCountOutputType




  // Custom InputTypes

  /**
   * FinanceiroCountOutputType without action
   */
  export type FinanceiroCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FinanceiroCountOutputType
     */
    select?: FinanceiroCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Usuario
   */


  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    senha: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    senha: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    senha: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    senha?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    senha?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    senha?: true
    _all?: true
  }

  export type UsuarioAggregateArgs = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs = {
    where?: UsuarioWhereInput
    orderBy?: Enumerable<UsuarioOrderByWithAggregationInput>
    by: UsuarioScalarFieldEnum[]
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }


  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    senha: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect = {
    id?: boolean
    nome?: boolean
    senha?: boolean
    Financeiro?: boolean | Usuario$FinanceiroArgs
    Fin_pago?: boolean | Usuario$Fin_pagoArgs
    Documento?: boolean | Usuario$DocumentoArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }


  export type UsuarioInclude = {
    Financeiro?: boolean | Usuario$FinanceiroArgs
    Fin_pago?: boolean | Usuario$Fin_pagoArgs
    Documento?: boolean | Usuario$DocumentoArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }

  export type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Usuario :
    S extends undefined ? never :
    S extends { include: any } & (UsuarioArgs | UsuarioFindManyArgs)
    ? Usuario  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Financeiro' ? Array < FinanceiroGetPayload<S['include'][P]>>  :
        P extends 'Fin_pago' ? Array < Fin_pagoGetPayload<S['include'][P]>>  :
        P extends 'Documento' ? Array < DocumentoGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UsuarioArgs | UsuarioFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Financeiro' ? Array < FinanceiroGetPayload<S['select'][P]>>  :
        P extends 'Fin_pago' ? Array < Fin_pagoGetPayload<S['select'][P]>>  :
        P extends 'Documento' ? Array < DocumentoGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Usuario ? Usuario[P] : never
  } 
      : Usuario


  type UsuarioCountArgs = 
    Omit<UsuarioFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsuarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Usuario'> extends True ? Prisma__UsuarioClient<UsuarioGetPayload<T>> : Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsuarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Usuario'> extends True ? Prisma__UsuarioClient<UsuarioGetPayload<T>> : Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>

    /**
     * Find the first Usuario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs>(
      args?: SelectSubset<T, UsuarioFindManyArgs>
    ): Prisma.PrismaPromise<Array<UsuarioGetPayload<T>>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs>(
      args: SelectSubset<T, UsuarioCreateArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs>(
      args: SelectSubset<T, UsuarioDeleteArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs>(
      args: SelectSubset<T, UsuarioUpdateArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs>(
      args: SelectSubset<T, UsuarioUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs>(
      args: SelectSubset<T, UsuarioUpsertArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsuarioClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Financeiro<T extends Usuario$FinanceiroArgs= {}>(args?: Subset<T, Usuario$FinanceiroArgs>): Prisma.PrismaPromise<Array<FinanceiroGetPayload<T>>| Null>;

    Fin_pago<T extends Usuario$Fin_pagoArgs= {}>(args?: Subset<T, Usuario$Fin_pagoArgs>): Prisma.PrismaPromise<Array<Fin_pagoGetPayload<T>>| Null>;

    Documento<T extends Usuario$DocumentoArgs= {}>(args?: Subset<T, Usuario$DocumentoArgs>): Prisma.PrismaPromise<Array<DocumentoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Usuario base type for findUnique actions
   */
  export type UsuarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUnique
   */
  export interface UsuarioFindUniqueArgs extends UsuarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario base type for findFirst actions
   */
  export type UsuarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }

  /**
   * Usuario findFirst
   */
  export interface UsuarioFindFirstArgs extends UsuarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario create
   */
  export type UsuarioCreateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }


  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }


  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario.Financeiro
   */
  export type Usuario$FinanceiroArgs = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    where?: FinanceiroWhereInput
    orderBy?: Enumerable<FinanceiroOrderByWithRelationInput>
    cursor?: FinanceiroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FinanceiroScalarFieldEnum>
  }


  /**
   * Usuario.Fin_pago
   */
  export type Usuario$Fin_pagoArgs = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
    where?: Fin_pagoWhereInput
    orderBy?: Enumerable<Fin_pagoOrderByWithRelationInput>
    cursor?: Fin_pagoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Fin_pagoScalarFieldEnum>
  }


  /**
   * Usuario.Documento
   */
  export type Usuario$DocumentoArgs = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
    where?: DocumentoWhereInput
    orderBy?: Enumerable<DocumentoOrderByWithRelationInput>
    cursor?: DocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DocumentoScalarFieldEnum>
  }


  /**
   * Usuario without action
   */
  export type UsuarioArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
  }



  /**
   * Model Conta
   */


  export type AggregateConta = {
    _count: ContaCountAggregateOutputType | null
    _avg: ContaAvgAggregateOutputType | null
    _sum: ContaSumAggregateOutputType | null
    _min: ContaMinAggregateOutputType | null
    _max: ContaMaxAggregateOutputType | null
  }

  export type ContaAvgAggregateOutputType = {
    id_conta: number | null
    Saldo: Decimal | null
  }

  export type ContaSumAggregateOutputType = {
    id_conta: number | null
    Saldo: Decimal | null
  }

  export type ContaMinAggregateOutputType = {
    id_conta: number | null
    nome: string | null
    Saldo: Decimal | null
  }

  export type ContaMaxAggregateOutputType = {
    id_conta: number | null
    nome: string | null
    Saldo: Decimal | null
  }

  export type ContaCountAggregateOutputType = {
    id_conta: number
    nome: number
    Saldo: number
    _all: number
  }


  export type ContaAvgAggregateInputType = {
    id_conta?: true
    Saldo?: true
  }

  export type ContaSumAggregateInputType = {
    id_conta?: true
    Saldo?: true
  }

  export type ContaMinAggregateInputType = {
    id_conta?: true
    nome?: true
    Saldo?: true
  }

  export type ContaMaxAggregateInputType = {
    id_conta?: true
    nome?: true
    Saldo?: true
  }

  export type ContaCountAggregateInputType = {
    id_conta?: true
    nome?: true
    Saldo?: true
    _all?: true
  }

  export type ContaAggregateArgs = {
    /**
     * Filter which Conta to aggregate.
     */
    where?: ContaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contas to fetch.
     */
    orderBy?: Enumerable<ContaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contas
    **/
    _count?: true | ContaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContaMaxAggregateInputType
  }

  export type GetContaAggregateType<T extends ContaAggregateArgs> = {
        [P in keyof T & keyof AggregateConta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConta[P]>
      : GetScalarType<T[P], AggregateConta[P]>
  }




  export type ContaGroupByArgs = {
    where?: ContaWhereInput
    orderBy?: Enumerable<ContaOrderByWithAggregationInput>
    by: ContaScalarFieldEnum[]
    having?: ContaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContaCountAggregateInputType | true
    _avg?: ContaAvgAggregateInputType
    _sum?: ContaSumAggregateInputType
    _min?: ContaMinAggregateInputType
    _max?: ContaMaxAggregateInputType
  }


  export type ContaGroupByOutputType = {
    id_conta: number
    nome: string
    Saldo: Decimal
    _count: ContaCountAggregateOutputType | null
    _avg: ContaAvgAggregateOutputType | null
    _sum: ContaSumAggregateOutputType | null
    _min: ContaMinAggregateOutputType | null
    _max: ContaMaxAggregateOutputType | null
  }

  type GetContaGroupByPayload<T extends ContaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ContaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContaGroupByOutputType[P]>
            : GetScalarType<T[P], ContaGroupByOutputType[P]>
        }
      >
    >


  export type ContaSelect = {
    id_conta?: boolean
    nome?: boolean
    Saldo?: boolean
    Documento?: boolean | Conta$DocumentoArgs
    _count?: boolean | ContaCountOutputTypeArgs
  }


  export type ContaInclude = {
    Documento?: boolean | Conta$DocumentoArgs
    _count?: boolean | ContaCountOutputTypeArgs
  }

  export type ContaGetPayload<S extends boolean | null | undefined | ContaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Conta :
    S extends undefined ? never :
    S extends { include: any } & (ContaArgs | ContaFindManyArgs)
    ? Conta  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Documento' ? Array < DocumentoGetPayload<S['include'][P]>>  :
        P extends '_count' ? ContaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ContaArgs | ContaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Documento' ? Array < DocumentoGetPayload<S['select'][P]>>  :
        P extends '_count' ? ContaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Conta ? Conta[P] : never
  } 
      : Conta


  type ContaCountArgs = 
    Omit<ContaFindManyArgs, 'select' | 'include'> & {
      select?: ContaCountAggregateInputType | true
    }

  export interface ContaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Conta that matches the filter.
     * @param {ContaFindUniqueArgs} args - Arguments to find a Conta
     * @example
     * // Get one Conta
     * const conta = await prisma.conta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Conta'> extends True ? Prisma__ContaClient<ContaGetPayload<T>> : Prisma__ContaClient<ContaGetPayload<T> | null, null>

    /**
     * Find one Conta that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContaFindUniqueOrThrowArgs} args - Arguments to find a Conta
     * @example
     * // Get one Conta
     * const conta = await prisma.conta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ContaFindUniqueOrThrowArgs>
    ): Prisma__ContaClient<ContaGetPayload<T>>

    /**
     * Find the first Conta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaFindFirstArgs} args - Arguments to find a Conta
     * @example
     * // Get one Conta
     * const conta = await prisma.conta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Conta'> extends True ? Prisma__ContaClient<ContaGetPayload<T>> : Prisma__ContaClient<ContaGetPayload<T> | null, null>

    /**
     * Find the first Conta that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaFindFirstOrThrowArgs} args - Arguments to find a Conta
     * @example
     * // Get one Conta
     * const conta = await prisma.conta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ContaFindFirstOrThrowArgs>
    ): Prisma__ContaClient<ContaGetPayload<T>>

    /**
     * Find zero or more Contas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contas
     * const contas = await prisma.conta.findMany()
     * 
     * // Get first 10 Contas
     * const contas = await prisma.conta.findMany({ take: 10 })
     * 
     * // Only select the `id_conta`
     * const contaWithId_contaOnly = await prisma.conta.findMany({ select: { id_conta: true } })
     * 
    **/
    findMany<T extends ContaFindManyArgs>(
      args?: SelectSubset<T, ContaFindManyArgs>
    ): Prisma.PrismaPromise<Array<ContaGetPayload<T>>>

    /**
     * Create a Conta.
     * @param {ContaCreateArgs} args - Arguments to create a Conta.
     * @example
     * // Create one Conta
     * const Conta = await prisma.conta.create({
     *   data: {
     *     // ... data to create a Conta
     *   }
     * })
     * 
    **/
    create<T extends ContaCreateArgs>(
      args: SelectSubset<T, ContaCreateArgs>
    ): Prisma__ContaClient<ContaGetPayload<T>>

    /**
     * Delete a Conta.
     * @param {ContaDeleteArgs} args - Arguments to delete one Conta.
     * @example
     * // Delete one Conta
     * const Conta = await prisma.conta.delete({
     *   where: {
     *     // ... filter to delete one Conta
     *   }
     * })
     * 
    **/
    delete<T extends ContaDeleteArgs>(
      args: SelectSubset<T, ContaDeleteArgs>
    ): Prisma__ContaClient<ContaGetPayload<T>>

    /**
     * Update one Conta.
     * @param {ContaUpdateArgs} args - Arguments to update one Conta.
     * @example
     * // Update one Conta
     * const conta = await prisma.conta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContaUpdateArgs>(
      args: SelectSubset<T, ContaUpdateArgs>
    ): Prisma__ContaClient<ContaGetPayload<T>>

    /**
     * Delete zero or more Contas.
     * @param {ContaDeleteManyArgs} args - Arguments to filter Contas to delete.
     * @example
     * // Delete a few Contas
     * const { count } = await prisma.conta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContaDeleteManyArgs>(
      args?: SelectSubset<T, ContaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contas
     * const conta = await prisma.conta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContaUpdateManyArgs>(
      args: SelectSubset<T, ContaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conta.
     * @param {ContaUpsertArgs} args - Arguments to update or create a Conta.
     * @example
     * // Update or create a Conta
     * const conta = await prisma.conta.upsert({
     *   create: {
     *     // ... data to create a Conta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conta we want to update
     *   }
     * })
    **/
    upsert<T extends ContaUpsertArgs>(
      args: SelectSubset<T, ContaUpsertArgs>
    ): Prisma__ContaClient<ContaGetPayload<T>>

    /**
     * Count the number of Contas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaCountArgs} args - Arguments to filter Contas to count.
     * @example
     * // Count the number of Contas
     * const count = await prisma.conta.count({
     *   where: {
     *     // ... the filter for the Contas we want to count
     *   }
     * })
    **/
    count<T extends ContaCountArgs>(
      args?: Subset<T, ContaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContaAggregateArgs>(args: Subset<T, ContaAggregateArgs>): Prisma.PrismaPromise<GetContaAggregateType<T>>

    /**
     * Group by Conta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContaGroupByArgs['orderBy'] }
        : { orderBy?: ContaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Conta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Documento<T extends Conta$DocumentoArgs= {}>(args?: Subset<T, Conta$DocumentoArgs>): Prisma.PrismaPromise<Array<DocumentoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Conta base type for findUnique actions
   */
  export type ContaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Conta
     */
    select?: ContaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContaInclude | null
    /**
     * Filter, which Conta to fetch.
     */
    where: ContaWhereUniqueInput
  }

  /**
   * Conta findUnique
   */
  export interface ContaFindUniqueArgs extends ContaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Conta findUniqueOrThrow
   */
  export type ContaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Conta
     */
    select?: ContaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContaInclude | null
    /**
     * Filter, which Conta to fetch.
     */
    where: ContaWhereUniqueInput
  }


  /**
   * Conta base type for findFirst actions
   */
  export type ContaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Conta
     */
    select?: ContaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContaInclude | null
    /**
     * Filter, which Conta to fetch.
     */
    where?: ContaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contas to fetch.
     */
    orderBy?: Enumerable<ContaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contas.
     */
    cursor?: ContaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contas.
     */
    distinct?: Enumerable<ContaScalarFieldEnum>
  }

  /**
   * Conta findFirst
   */
  export interface ContaFindFirstArgs extends ContaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Conta findFirstOrThrow
   */
  export type ContaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Conta
     */
    select?: ContaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContaInclude | null
    /**
     * Filter, which Conta to fetch.
     */
    where?: ContaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contas to fetch.
     */
    orderBy?: Enumerable<ContaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contas.
     */
    cursor?: ContaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contas.
     */
    distinct?: Enumerable<ContaScalarFieldEnum>
  }


  /**
   * Conta findMany
   */
  export type ContaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Conta
     */
    select?: ContaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContaInclude | null
    /**
     * Filter, which Contas to fetch.
     */
    where?: ContaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contas to fetch.
     */
    orderBy?: Enumerable<ContaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contas.
     */
    cursor?: ContaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contas.
     */
    skip?: number
    distinct?: Enumerable<ContaScalarFieldEnum>
  }


  /**
   * Conta create
   */
  export type ContaCreateArgs = {
    /**
     * Select specific fields to fetch from the Conta
     */
    select?: ContaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContaInclude | null
    /**
     * The data needed to create a Conta.
     */
    data: XOR<ContaCreateInput, ContaUncheckedCreateInput>
  }


  /**
   * Conta update
   */
  export type ContaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Conta
     */
    select?: ContaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContaInclude | null
    /**
     * The data needed to update a Conta.
     */
    data: XOR<ContaUpdateInput, ContaUncheckedUpdateInput>
    /**
     * Choose, which Conta to update.
     */
    where: ContaWhereUniqueInput
  }


  /**
   * Conta updateMany
   */
  export type ContaUpdateManyArgs = {
    /**
     * The data used to update Contas.
     */
    data: XOR<ContaUpdateManyMutationInput, ContaUncheckedUpdateManyInput>
    /**
     * Filter which Contas to update
     */
    where?: ContaWhereInput
  }


  /**
   * Conta upsert
   */
  export type ContaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Conta
     */
    select?: ContaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContaInclude | null
    /**
     * The filter to search for the Conta to update in case it exists.
     */
    where: ContaWhereUniqueInput
    /**
     * In case the Conta found by the `where` argument doesn't exist, create a new Conta with this data.
     */
    create: XOR<ContaCreateInput, ContaUncheckedCreateInput>
    /**
     * In case the Conta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContaUpdateInput, ContaUncheckedUpdateInput>
  }


  /**
   * Conta delete
   */
  export type ContaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Conta
     */
    select?: ContaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContaInclude | null
    /**
     * Filter which Conta to delete.
     */
    where: ContaWhereUniqueInput
  }


  /**
   * Conta deleteMany
   */
  export type ContaDeleteManyArgs = {
    /**
     * Filter which Contas to delete
     */
    where?: ContaWhereInput
  }


  /**
   * Conta.Documento
   */
  export type Conta$DocumentoArgs = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
    where?: DocumentoWhereInput
    orderBy?: Enumerable<DocumentoOrderByWithRelationInput>
    cursor?: DocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DocumentoScalarFieldEnum>
  }


  /**
   * Conta without action
   */
  export type ContaArgs = {
    /**
     * Select specific fields to fetch from the Conta
     */
    select?: ContaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContaInclude | null
  }



  /**
   * Model Produto
   */


  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    id_produto: number | null
    valor_v: Decimal | null
    valor_c: Decimal | null
    estoque: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    id_produto: number | null
    valor_v: Decimal | null
    valor_c: Decimal | null
    estoque: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    id_produto: number | null
    cod_barras: string | null
    descricao: string | null
    valor_v: Decimal | null
    valor_c: Decimal | null
    estoque: number | null
  }

  export type ProdutoMaxAggregateOutputType = {
    id_produto: number | null
    cod_barras: string | null
    descricao: string | null
    valor_v: Decimal | null
    valor_c: Decimal | null
    estoque: number | null
  }

  export type ProdutoCountAggregateOutputType = {
    id_produto: number
    cod_barras: number
    descricao: number
    valor_v: number
    valor_c: number
    estoque: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    id_produto?: true
    valor_v?: true
    valor_c?: true
    estoque?: true
  }

  export type ProdutoSumAggregateInputType = {
    id_produto?: true
    valor_v?: true
    valor_c?: true
    estoque?: true
  }

  export type ProdutoMinAggregateInputType = {
    id_produto?: true
    cod_barras?: true
    descricao?: true
    valor_v?: true
    valor_c?: true
    estoque?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id_produto?: true
    cod_barras?: true
    descricao?: true
    valor_v?: true
    valor_c?: true
    estoque?: true
  }

  export type ProdutoCountAggregateInputType = {
    id_produto?: true
    cod_barras?: true
    descricao?: true
    valor_v?: true
    valor_c?: true
    estoque?: true
    _all?: true
  }

  export type ProdutoAggregateArgs = {
    /**
     * Filter which Produto to aggregate.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs = {
    where?: ProdutoWhereInput
    orderBy?: Enumerable<ProdutoOrderByWithAggregationInput>
    by: ProdutoScalarFieldEnum[]
    having?: ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }


  export type ProdutoGroupByOutputType = {
    id_produto: number
    cod_barras: string
    descricao: string
    valor_v: Decimal
    valor_c: Decimal
    estoque: number
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoSelect = {
    id_produto?: boolean
    cod_barras?: boolean
    descricao?: boolean
    valor_v?: boolean
    valor_c?: boolean
    estoque?: boolean
  }


  export type ProdutoGetPayload<S extends boolean | null | undefined | ProdutoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Produto :
    S extends undefined ? never :
    S extends { include: any } & (ProdutoArgs | ProdutoFindManyArgs)
    ? Produto 
    : S extends { select: any } & (ProdutoArgs | ProdutoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Produto ? Produto[P] : never
  } 
      : Produto


  type ProdutoCountArgs = 
    Omit<ProdutoFindManyArgs, 'select' | 'include'> & {
      select?: ProdutoCountAggregateInputType | true
    }

  export interface ProdutoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Produto that matches the filter.
     * @param {ProdutoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProdutoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProdutoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Produto'> extends True ? Prisma__ProdutoClient<ProdutoGetPayload<T>> : Prisma__ProdutoClient<ProdutoGetPayload<T> | null, null>

    /**
     * Find one Produto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProdutoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProdutoFindUniqueOrThrowArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProdutoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProdutoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Produto'> extends True ? Prisma__ProdutoClient<ProdutoGetPayload<T>> : Prisma__ProdutoClient<ProdutoGetPayload<T> | null, null>

    /**
     * Find the first Produto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProdutoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProdutoFindFirstOrThrowArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id_produto`
     * const produtoWithId_produtoOnly = await prisma.produto.findMany({ select: { id_produto: true } })
     * 
    **/
    findMany<T extends ProdutoFindManyArgs>(
      args?: SelectSubset<T, ProdutoFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProdutoGetPayload<T>>>

    /**
     * Create a Produto.
     * @param {ProdutoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
    **/
    create<T extends ProdutoCreateArgs>(
      args: SelectSubset<T, ProdutoCreateArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Delete a Produto.
     * @param {ProdutoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
    **/
    delete<T extends ProdutoDeleteArgs>(
      args: SelectSubset<T, ProdutoDeleteArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Update one Produto.
     * @param {ProdutoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProdutoUpdateArgs>(
      args: SelectSubset<T, ProdutoUpdateArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProdutoDeleteManyArgs>(
      args?: SelectSubset<T, ProdutoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProdutoUpdateManyArgs>(
      args: SelectSubset<T, ProdutoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {ProdutoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
    **/
    upsert<T extends ProdutoUpsertArgs>(
      args: SelectSubset<T, ProdutoUpsertArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCountArgs>(
      args?: Subset<T, ProdutoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): Prisma.PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProdutoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Produto base type for findUnique actions
   */
  export type ProdutoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findUnique
   */
  export interface ProdutoFindUniqueArgs extends ProdutoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Produto findUniqueOrThrow
   */
  export type ProdutoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto base type for findFirst actions
   */
  export type ProdutoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }

  /**
   * Produto findFirst
   */
  export interface ProdutoFindFirstArgs extends ProdutoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Produto findFirstOrThrow
   */
  export type ProdutoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * Produto findMany
   */
  export type ProdutoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * Produto create
   */
  export type ProdutoCreateArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * The data needed to create a Produto.
     */
    data: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
  }


  /**
   * Produto update
   */
  export type ProdutoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * The data needed to update a Produto.
     */
    data: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Produto to update.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto updateMany
   */
  export type ProdutoUpdateManyArgs = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
  }


  /**
   * Produto upsert
   */
  export type ProdutoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * The filter to search for the Produto to update in case it exists.
     */
    where: ProdutoWhereUniqueInput
    /**
     * In case the Produto found by the `where` argument doesn't exist, create a new Produto with this data.
     */
    create: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
    /**
     * In case the Produto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
  }


  /**
   * Produto delete
   */
  export type ProdutoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Filter which Produto to delete.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto deleteMany
   */
  export type ProdutoDeleteManyArgs = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutoWhereInput
  }


  /**
   * Produto without action
   */
  export type ProdutoArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
  }



  /**
   * Model Documento
   */


  export type AggregateDocumento = {
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  export type DocumentoAvgAggregateOutputType = {
    doc_controle: number | null
    usuarioId: number | null
    id_cliente: number | null
    valor: Decimal | null
    contaId_conta: number | null
  }

  export type DocumentoSumAggregateOutputType = {
    doc_controle: number | null
    usuarioId: number | null
    id_cliente: number | null
    valor: Decimal | null
    contaId_conta: number | null
  }

  export type DocumentoMinAggregateOutputType = {
    doc_controle: number | null
    usuarioId: number | null
    id_cliente: number | null
    valor: Decimal | null
    contaId_conta: number | null
  }

  export type DocumentoMaxAggregateOutputType = {
    doc_controle: number | null
    usuarioId: number | null
    id_cliente: number | null
    valor: Decimal | null
    contaId_conta: number | null
  }

  export type DocumentoCountAggregateOutputType = {
    doc_controle: number
    usuarioId: number
    id_cliente: number
    valor: number
    contaId_conta: number
    _all: number
  }


  export type DocumentoAvgAggregateInputType = {
    doc_controle?: true
    usuarioId?: true
    id_cliente?: true
    valor?: true
    contaId_conta?: true
  }

  export type DocumentoSumAggregateInputType = {
    doc_controle?: true
    usuarioId?: true
    id_cliente?: true
    valor?: true
    contaId_conta?: true
  }

  export type DocumentoMinAggregateInputType = {
    doc_controle?: true
    usuarioId?: true
    id_cliente?: true
    valor?: true
    contaId_conta?: true
  }

  export type DocumentoMaxAggregateInputType = {
    doc_controle?: true
    usuarioId?: true
    id_cliente?: true
    valor?: true
    contaId_conta?: true
  }

  export type DocumentoCountAggregateInputType = {
    doc_controle?: true
    usuarioId?: true
    id_cliente?: true
    valor?: true
    contaId_conta?: true
    _all?: true
  }

  export type DocumentoAggregateArgs = {
    /**
     * Filter which Documento to aggregate.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: Enumerable<DocumentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documentos
    **/
    _count?: true | DocumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentoMaxAggregateInputType
  }

  export type GetDocumentoAggregateType<T extends DocumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumento[P]>
      : GetScalarType<T[P], AggregateDocumento[P]>
  }




  export type DocumentoGroupByArgs = {
    where?: DocumentoWhereInput
    orderBy?: Enumerable<DocumentoOrderByWithAggregationInput>
    by: DocumentoScalarFieldEnum[]
    having?: DocumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentoCountAggregateInputType | true
    _avg?: DocumentoAvgAggregateInputType
    _sum?: DocumentoSumAggregateInputType
    _min?: DocumentoMinAggregateInputType
    _max?: DocumentoMaxAggregateInputType
  }


  export type DocumentoGroupByOutputType = {
    doc_controle: number
    usuarioId: number
    id_cliente: number
    valor: Decimal
    contaId_conta: number
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  type GetDocumentoGroupByPayload<T extends DocumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DocumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
        }
      >
    >


  export type DocumentoSelect = {
    doc_controle?: boolean
    usuarioId?: boolean
    id_cliente?: boolean
    valor?: boolean
    contaId_conta?: boolean
    Financeiro?: boolean | Documento$FinanceiroArgs
    user?: boolean | UsuarioArgs
    conta?: boolean | ContaArgs
    _count?: boolean | DocumentoCountOutputTypeArgs
  }


  export type DocumentoInclude = {
    Financeiro?: boolean | Documento$FinanceiroArgs
    user?: boolean | UsuarioArgs
    conta?: boolean | ContaArgs
    _count?: boolean | DocumentoCountOutputTypeArgs
  }

  export type DocumentoGetPayload<S extends boolean | null | undefined | DocumentoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Documento :
    S extends undefined ? never :
    S extends { include: any } & (DocumentoArgs | DocumentoFindManyArgs)
    ? Documento  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Financeiro' ? Array < FinanceiroGetPayload<S['include'][P]>>  :
        P extends 'user' ? UsuarioGetPayload<S['include'][P]> :
        P extends 'conta' ? ContaGetPayload<S['include'][P]> :
        P extends '_count' ? DocumentoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DocumentoArgs | DocumentoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Financeiro' ? Array < FinanceiroGetPayload<S['select'][P]>>  :
        P extends 'user' ? UsuarioGetPayload<S['select'][P]> :
        P extends 'conta' ? ContaGetPayload<S['select'][P]> :
        P extends '_count' ? DocumentoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Documento ? Documento[P] : never
  } 
      : Documento


  type DocumentoCountArgs = 
    Omit<DocumentoFindManyArgs, 'select' | 'include'> & {
      select?: DocumentoCountAggregateInputType | true
    }

  export interface DocumentoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Documento that matches the filter.
     * @param {DocumentoFindUniqueArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DocumentoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DocumentoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Documento'> extends True ? Prisma__DocumentoClient<DocumentoGetPayload<T>> : Prisma__DocumentoClient<DocumentoGetPayload<T> | null, null>

    /**
     * Find one Documento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DocumentoFindUniqueOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DocumentoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DocumentoFindUniqueOrThrowArgs>
    ): Prisma__DocumentoClient<DocumentoGetPayload<T>>

    /**
     * Find the first Documento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DocumentoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DocumentoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Documento'> extends True ? Prisma__DocumentoClient<DocumentoGetPayload<T>> : Prisma__DocumentoClient<DocumentoGetPayload<T> | null, null>

    /**
     * Find the first Documento that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DocumentoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DocumentoFindFirstOrThrowArgs>
    ): Prisma__DocumentoClient<DocumentoGetPayload<T>>

    /**
     * Find zero or more Documentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documentos
     * const documentos = await prisma.documento.findMany()
     * 
     * // Get first 10 Documentos
     * const documentos = await prisma.documento.findMany({ take: 10 })
     * 
     * // Only select the `doc_controle`
     * const documentoWithDoc_controleOnly = await prisma.documento.findMany({ select: { doc_controle: true } })
     * 
    **/
    findMany<T extends DocumentoFindManyArgs>(
      args?: SelectSubset<T, DocumentoFindManyArgs>
    ): Prisma.PrismaPromise<Array<DocumentoGetPayload<T>>>

    /**
     * Create a Documento.
     * @param {DocumentoCreateArgs} args - Arguments to create a Documento.
     * @example
     * // Create one Documento
     * const Documento = await prisma.documento.create({
     *   data: {
     *     // ... data to create a Documento
     *   }
     * })
     * 
    **/
    create<T extends DocumentoCreateArgs>(
      args: SelectSubset<T, DocumentoCreateArgs>
    ): Prisma__DocumentoClient<DocumentoGetPayload<T>>

    /**
     * Delete a Documento.
     * @param {DocumentoDeleteArgs} args - Arguments to delete one Documento.
     * @example
     * // Delete one Documento
     * const Documento = await prisma.documento.delete({
     *   where: {
     *     // ... filter to delete one Documento
     *   }
     * })
     * 
    **/
    delete<T extends DocumentoDeleteArgs>(
      args: SelectSubset<T, DocumentoDeleteArgs>
    ): Prisma__DocumentoClient<DocumentoGetPayload<T>>

    /**
     * Update one Documento.
     * @param {DocumentoUpdateArgs} args - Arguments to update one Documento.
     * @example
     * // Update one Documento
     * const documento = await prisma.documento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DocumentoUpdateArgs>(
      args: SelectSubset<T, DocumentoUpdateArgs>
    ): Prisma__DocumentoClient<DocumentoGetPayload<T>>

    /**
     * Delete zero or more Documentos.
     * @param {DocumentoDeleteManyArgs} args - Arguments to filter Documentos to delete.
     * @example
     * // Delete a few Documentos
     * const { count } = await prisma.documento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DocumentoDeleteManyArgs>(
      args?: SelectSubset<T, DocumentoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documentos
     * const documento = await prisma.documento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DocumentoUpdateManyArgs>(
      args: SelectSubset<T, DocumentoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Documento.
     * @param {DocumentoUpsertArgs} args - Arguments to update or create a Documento.
     * @example
     * // Update or create a Documento
     * const documento = await prisma.documento.upsert({
     *   create: {
     *     // ... data to create a Documento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Documento we want to update
     *   }
     * })
    **/
    upsert<T extends DocumentoUpsertArgs>(
      args: SelectSubset<T, DocumentoUpsertArgs>
    ): Prisma__DocumentoClient<DocumentoGetPayload<T>>

    /**
     * Count the number of Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoCountArgs} args - Arguments to filter Documentos to count.
     * @example
     * // Count the number of Documentos
     * const count = await prisma.documento.count({
     *   where: {
     *     // ... the filter for the Documentos we want to count
     *   }
     * })
    **/
    count<T extends DocumentoCountArgs>(
      args?: Subset<T, DocumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentoAggregateArgs>(args: Subset<T, DocumentoAggregateArgs>): Prisma.PrismaPromise<GetDocumentoAggregateType<T>>

    /**
     * Group by Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentoGroupByArgs['orderBy'] }
        : { orderBy?: DocumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Documento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DocumentoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Financeiro<T extends Documento$FinanceiroArgs= {}>(args?: Subset<T, Documento$FinanceiroArgs>): Prisma.PrismaPromise<Array<FinanceiroGetPayload<T>>| Null>;

    user<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    conta<T extends ContaArgs= {}>(args?: Subset<T, ContaArgs>): Prisma__ContaClient<ContaGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Documento base type for findUnique actions
   */
  export type DocumentoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento findUnique
   */
  export interface DocumentoFindUniqueArgs extends DocumentoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Documento findUniqueOrThrow
   */
  export type DocumentoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }


  /**
   * Documento base type for findFirst actions
   */
  export type DocumentoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: Enumerable<DocumentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: Enumerable<DocumentoScalarFieldEnum>
  }

  /**
   * Documento findFirst
   */
  export interface DocumentoFindFirstArgs extends DocumentoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Documento findFirstOrThrow
   */
  export type DocumentoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: Enumerable<DocumentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: Enumerable<DocumentoScalarFieldEnum>
  }


  /**
   * Documento findMany
   */
  export type DocumentoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
    /**
     * Filter, which Documentos to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: Enumerable<DocumentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    distinct?: Enumerable<DocumentoScalarFieldEnum>
  }


  /**
   * Documento create
   */
  export type DocumentoCreateArgs = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
    /**
     * The data needed to create a Documento.
     */
    data: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
  }


  /**
   * Documento update
   */
  export type DocumentoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
    /**
     * The data needed to update a Documento.
     */
    data: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
    /**
     * Choose, which Documento to update.
     */
    where: DocumentoWhereUniqueInput
  }


  /**
   * Documento updateMany
   */
  export type DocumentoUpdateManyArgs = {
    /**
     * The data used to update Documentos.
     */
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyInput>
    /**
     * Filter which Documentos to update
     */
    where?: DocumentoWhereInput
  }


  /**
   * Documento upsert
   */
  export type DocumentoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
    /**
     * The filter to search for the Documento to update in case it exists.
     */
    where: DocumentoWhereUniqueInput
    /**
     * In case the Documento found by the `where` argument doesn't exist, create a new Documento with this data.
     */
    create: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
    /**
     * In case the Documento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
  }


  /**
   * Documento delete
   */
  export type DocumentoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
    /**
     * Filter which Documento to delete.
     */
    where: DocumentoWhereUniqueInput
  }


  /**
   * Documento deleteMany
   */
  export type DocumentoDeleteManyArgs = {
    /**
     * Filter which Documentos to delete
     */
    where?: DocumentoWhereInput
  }


  /**
   * Documento.Financeiro
   */
  export type Documento$FinanceiroArgs = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    where?: FinanceiroWhereInput
    orderBy?: Enumerable<FinanceiroOrderByWithRelationInput>
    cursor?: FinanceiroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FinanceiroScalarFieldEnum>
  }


  /**
   * Documento without action
   */
  export type DocumentoArgs = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude | null
  }



  /**
   * Model cliente
   */


  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    cliente_id: number | null
    numero: number | null
  }

  export type ClienteSumAggregateOutputType = {
    cliente_id: number | null
    numero: number | null
  }

  export type ClienteMinAggregateOutputType = {
    cliente_id: number | null
    cpfCnpj: string | null
    email: string | null
    nome: string | null
    telefone: string | null
    endereco: string | null
    numero: number | null
  }

  export type ClienteMaxAggregateOutputType = {
    cliente_id: number | null
    cpfCnpj: string | null
    email: string | null
    nome: string | null
    telefone: string | null
    endereco: string | null
    numero: number | null
  }

  export type ClienteCountAggregateOutputType = {
    cliente_id: number
    cpfCnpj: number
    email: number
    nome: number
    telefone: number
    endereco: number
    numero: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    cliente_id?: true
    numero?: true
  }

  export type ClienteSumAggregateInputType = {
    cliente_id?: true
    numero?: true
  }

  export type ClienteMinAggregateInputType = {
    cliente_id?: true
    cpfCnpj?: true
    email?: true
    nome?: true
    telefone?: true
    endereco?: true
    numero?: true
  }

  export type ClienteMaxAggregateInputType = {
    cliente_id?: true
    cpfCnpj?: true
    email?: true
    nome?: true
    telefone?: true
    endereco?: true
    numero?: true
  }

  export type ClienteCountAggregateInputType = {
    cliente_id?: true
    cpfCnpj?: true
    email?: true
    nome?: true
    telefone?: true
    endereco?: true
    numero?: true
    _all?: true
  }

  export type ClienteAggregateArgs = {
    /**
     * Filter which cliente to aggregate.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs = {
    where?: clienteWhereInput
    orderBy?: Enumerable<clienteOrderByWithAggregationInput>
    by: ClienteScalarFieldEnum[]
    having?: clienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }


  export type ClienteGroupByOutputType = {
    cliente_id: number
    cpfCnpj: string
    email: string
    nome: string
    telefone: string
    endereco: string
    numero: number
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type clienteSelect = {
    cliente_id?: boolean
    cpfCnpj?: boolean
    email?: boolean
    nome?: boolean
    telefone?: boolean
    endereco?: boolean
    numero?: boolean
    Financeiro?: boolean | cliente$FinanceiroArgs
    _count?: boolean | ClienteCountOutputTypeArgs
  }


  export type clienteInclude = {
    Financeiro?: boolean | cliente$FinanceiroArgs
    _count?: boolean | ClienteCountOutputTypeArgs
  }

  export type clienteGetPayload<S extends boolean | null | undefined | clienteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? cliente :
    S extends undefined ? never :
    S extends { include: any } & (clienteArgs | clienteFindManyArgs)
    ? cliente  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Financeiro' ? Array < FinanceiroGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClienteCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (clienteArgs | clienteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Financeiro' ? Array < FinanceiroGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClienteCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof cliente ? cliente[P] : never
  } 
      : cliente


  type clienteCountArgs = 
    Omit<clienteFindManyArgs, 'select' | 'include'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface clienteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Cliente that matches the filter.
     * @param {clienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clienteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, clienteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'cliente'> extends True ? Prisma__clienteClient<clienteGetPayload<T>> : Prisma__clienteClient<clienteGetPayload<T> | null, null>

    /**
     * Find one Cliente that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {clienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clienteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, clienteFindUniqueOrThrowArgs>
    ): Prisma__clienteClient<clienteGetPayload<T>>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clienteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, clienteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'cliente'> extends True ? Prisma__clienteClient<clienteGetPayload<T>> : Prisma__clienteClient<clienteGetPayload<T> | null, null>

    /**
     * Find the first Cliente that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clienteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, clienteFindFirstOrThrowArgs>
    ): Prisma__clienteClient<clienteGetPayload<T>>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `cliente_id`
     * const clienteWithCliente_idOnly = await prisma.cliente.findMany({ select: { cliente_id: true } })
     * 
    **/
    findMany<T extends clienteFindManyArgs>(
      args?: SelectSubset<T, clienteFindManyArgs>
    ): Prisma.PrismaPromise<Array<clienteGetPayload<T>>>

    /**
     * Create a Cliente.
     * @param {clienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends clienteCreateArgs>(
      args: SelectSubset<T, clienteCreateArgs>
    ): Prisma__clienteClient<clienteGetPayload<T>>

    /**
     * Delete a Cliente.
     * @param {clienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends clienteDeleteArgs>(
      args: SelectSubset<T, clienteDeleteArgs>
    ): Prisma__clienteClient<clienteGetPayload<T>>

    /**
     * Update one Cliente.
     * @param {clienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clienteUpdateArgs>(
      args: SelectSubset<T, clienteUpdateArgs>
    ): Prisma__clienteClient<clienteGetPayload<T>>

    /**
     * Delete zero or more Clientes.
     * @param {clienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clienteDeleteManyArgs>(
      args?: SelectSubset<T, clienteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clienteUpdateManyArgs>(
      args: SelectSubset<T, clienteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {clienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends clienteUpsertArgs>(
      args: SelectSubset<T, clienteUpsertArgs>
    ): Prisma__clienteClient<clienteGetPayload<T>>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends clienteCountArgs>(
      args?: Subset<T, clienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clienteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Financeiro<T extends cliente$FinanceiroArgs= {}>(args?: Subset<T, cliente$FinanceiroArgs>): Prisma.PrismaPromise<Array<FinanceiroGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * cliente base type for findUnique actions
   */
  export type clienteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clienteInclude | null
    /**
     * Filter, which cliente to fetch.
     */
    where: clienteWhereUniqueInput
  }

  /**
   * cliente findUnique
   */
  export interface clienteFindUniqueArgs extends clienteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cliente findUniqueOrThrow
   */
  export type clienteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clienteInclude | null
    /**
     * Filter, which cliente to fetch.
     */
    where: clienteWhereUniqueInput
  }


  /**
   * cliente base type for findFirst actions
   */
  export type clienteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clienteInclude | null
    /**
     * Filter, which cliente to fetch.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }

  /**
   * cliente findFirst
   */
  export interface clienteFindFirstArgs extends clienteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cliente findFirstOrThrow
   */
  export type clienteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clienteInclude | null
    /**
     * Filter, which cliente to fetch.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * cliente findMany
   */
  export type clienteFindManyArgs = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clienteInclude | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientes.
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * cliente create
   */
  export type clienteCreateArgs = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clienteInclude | null
    /**
     * The data needed to create a cliente.
     */
    data: XOR<clienteCreateInput, clienteUncheckedCreateInput>
  }


  /**
   * cliente update
   */
  export type clienteUpdateArgs = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clienteInclude | null
    /**
     * The data needed to update a cliente.
     */
    data: XOR<clienteUpdateInput, clienteUncheckedUpdateInput>
    /**
     * Choose, which cliente to update.
     */
    where: clienteWhereUniqueInput
  }


  /**
   * cliente updateMany
   */
  export type clienteUpdateManyArgs = {
    /**
     * The data used to update clientes.
     */
    data: XOR<clienteUpdateManyMutationInput, clienteUncheckedUpdateManyInput>
    /**
     * Filter which clientes to update
     */
    where?: clienteWhereInput
  }


  /**
   * cliente upsert
   */
  export type clienteUpsertArgs = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clienteInclude | null
    /**
     * The filter to search for the cliente to update in case it exists.
     */
    where: clienteWhereUniqueInput
    /**
     * In case the cliente found by the `where` argument doesn't exist, create a new cliente with this data.
     */
    create: XOR<clienteCreateInput, clienteUncheckedCreateInput>
    /**
     * In case the cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clienteUpdateInput, clienteUncheckedUpdateInput>
  }


  /**
   * cliente delete
   */
  export type clienteDeleteArgs = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clienteInclude | null
    /**
     * Filter which cliente to delete.
     */
    where: clienteWhereUniqueInput
  }


  /**
   * cliente deleteMany
   */
  export type clienteDeleteManyArgs = {
    /**
     * Filter which clientes to delete
     */
    where?: clienteWhereInput
  }


  /**
   * cliente.Financeiro
   */
  export type cliente$FinanceiroArgs = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    where?: FinanceiroWhereInput
    orderBy?: Enumerable<FinanceiroOrderByWithRelationInput>
    cursor?: FinanceiroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FinanceiroScalarFieldEnum>
  }


  /**
   * cliente without action
   */
  export type clienteArgs = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clienteInclude | null
  }



  /**
   * Model Financeiro
   */


  export type AggregateFinanceiro = {
    _count: FinanceiroCountAggregateOutputType | null
    _avg: FinanceiroAvgAggregateOutputType | null
    _sum: FinanceiroSumAggregateOutputType | null
    _min: FinanceiroMinAggregateOutputType | null
    _max: FinanceiroMaxAggregateOutputType | null
  }

  export type FinanceiroAvgAggregateOutputType = {
    fin_id: number | null
    Cliente_id: number | null
    documentoDoc_controle: number | null
    usuarioId: number | null
    valor: Decimal | null
  }

  export type FinanceiroSumAggregateOutputType = {
    fin_id: number | null
    Cliente_id: number | null
    documentoDoc_controle: number | null
    usuarioId: number | null
    valor: Decimal | null
  }

  export type FinanceiroMinAggregateOutputType = {
    fin_id: number | null
    Cliente_id: number | null
    documentoDoc_controle: number | null
    usuarioId: number | null
    dt_create: Date | null
    dt_vencimento: Date | null
    pago: boolean | null
    cancelado: boolean | null
    valor: Decimal | null
  }

  export type FinanceiroMaxAggregateOutputType = {
    fin_id: number | null
    Cliente_id: number | null
    documentoDoc_controle: number | null
    usuarioId: number | null
    dt_create: Date | null
    dt_vencimento: Date | null
    pago: boolean | null
    cancelado: boolean | null
    valor: Decimal | null
  }

  export type FinanceiroCountAggregateOutputType = {
    fin_id: number
    Cliente_id: number
    documentoDoc_controle: number
    usuarioId: number
    dt_create: number
    dt_vencimento: number
    pago: number
    cancelado: number
    valor: number
    _all: number
  }


  export type FinanceiroAvgAggregateInputType = {
    fin_id?: true
    Cliente_id?: true
    documentoDoc_controle?: true
    usuarioId?: true
    valor?: true
  }

  export type FinanceiroSumAggregateInputType = {
    fin_id?: true
    Cliente_id?: true
    documentoDoc_controle?: true
    usuarioId?: true
    valor?: true
  }

  export type FinanceiroMinAggregateInputType = {
    fin_id?: true
    Cliente_id?: true
    documentoDoc_controle?: true
    usuarioId?: true
    dt_create?: true
    dt_vencimento?: true
    pago?: true
    cancelado?: true
    valor?: true
  }

  export type FinanceiroMaxAggregateInputType = {
    fin_id?: true
    Cliente_id?: true
    documentoDoc_controle?: true
    usuarioId?: true
    dt_create?: true
    dt_vencimento?: true
    pago?: true
    cancelado?: true
    valor?: true
  }

  export type FinanceiroCountAggregateInputType = {
    fin_id?: true
    Cliente_id?: true
    documentoDoc_controle?: true
    usuarioId?: true
    dt_create?: true
    dt_vencimento?: true
    pago?: true
    cancelado?: true
    valor?: true
    _all?: true
  }

  export type FinanceiroAggregateArgs = {
    /**
     * Filter which Financeiro to aggregate.
     */
    where?: FinanceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Financeiros to fetch.
     */
    orderBy?: Enumerable<FinanceiroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FinanceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Financeiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Financeiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Financeiros
    **/
    _count?: true | FinanceiroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FinanceiroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FinanceiroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinanceiroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinanceiroMaxAggregateInputType
  }

  export type GetFinanceiroAggregateType<T extends FinanceiroAggregateArgs> = {
        [P in keyof T & keyof AggregateFinanceiro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinanceiro[P]>
      : GetScalarType<T[P], AggregateFinanceiro[P]>
  }




  export type FinanceiroGroupByArgs = {
    where?: FinanceiroWhereInput
    orderBy?: Enumerable<FinanceiroOrderByWithAggregationInput>
    by: FinanceiroScalarFieldEnum[]
    having?: FinanceiroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinanceiroCountAggregateInputType | true
    _avg?: FinanceiroAvgAggregateInputType
    _sum?: FinanceiroSumAggregateInputType
    _min?: FinanceiroMinAggregateInputType
    _max?: FinanceiroMaxAggregateInputType
  }


  export type FinanceiroGroupByOutputType = {
    fin_id: number
    Cliente_id: number
    documentoDoc_controle: number
    usuarioId: number
    dt_create: Date
    dt_vencimento: Date
    pago: boolean
    cancelado: boolean
    valor: Decimal
    _count: FinanceiroCountAggregateOutputType | null
    _avg: FinanceiroAvgAggregateOutputType | null
    _sum: FinanceiroSumAggregateOutputType | null
    _min: FinanceiroMinAggregateOutputType | null
    _max: FinanceiroMaxAggregateOutputType | null
  }

  type GetFinanceiroGroupByPayload<T extends FinanceiroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FinanceiroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinanceiroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinanceiroGroupByOutputType[P]>
            : GetScalarType<T[P], FinanceiroGroupByOutputType[P]>
        }
      >
    >


  export type FinanceiroSelect = {
    fin_id?: boolean
    Cliente_id?: boolean
    documentoDoc_controle?: boolean
    usuarioId?: boolean
    dt_create?: boolean
    dt_vencimento?: boolean
    pago?: boolean
    cancelado?: boolean
    valor?: boolean
    documento?: boolean | DocumentoArgs
    user?: boolean | UsuarioArgs
    cliente?: boolean | clienteArgs
    Fin_pago?: boolean | Financeiro$Fin_pagoArgs
    _count?: boolean | FinanceiroCountOutputTypeArgs
  }


  export type FinanceiroInclude = {
    documento?: boolean | DocumentoArgs
    user?: boolean | UsuarioArgs
    cliente?: boolean | clienteArgs
    Fin_pago?: boolean | Financeiro$Fin_pagoArgs
    _count?: boolean | FinanceiroCountOutputTypeArgs
  }

  export type FinanceiroGetPayload<S extends boolean | null | undefined | FinanceiroArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Financeiro :
    S extends undefined ? never :
    S extends { include: any } & (FinanceiroArgs | FinanceiroFindManyArgs)
    ? Financeiro  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'documento' ? DocumentoGetPayload<S['include'][P]> :
        P extends 'user' ? UsuarioGetPayload<S['include'][P]> :
        P extends 'cliente' ? clienteGetPayload<S['include'][P]> :
        P extends 'Fin_pago' ? Array < Fin_pagoGetPayload<S['include'][P]>>  :
        P extends '_count' ? FinanceiroCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FinanceiroArgs | FinanceiroFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'documento' ? DocumentoGetPayload<S['select'][P]> :
        P extends 'user' ? UsuarioGetPayload<S['select'][P]> :
        P extends 'cliente' ? clienteGetPayload<S['select'][P]> :
        P extends 'Fin_pago' ? Array < Fin_pagoGetPayload<S['select'][P]>>  :
        P extends '_count' ? FinanceiroCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Financeiro ? Financeiro[P] : never
  } 
      : Financeiro


  type FinanceiroCountArgs = 
    Omit<FinanceiroFindManyArgs, 'select' | 'include'> & {
      select?: FinanceiroCountAggregateInputType | true
    }

  export interface FinanceiroDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Financeiro that matches the filter.
     * @param {FinanceiroFindUniqueArgs} args - Arguments to find a Financeiro
     * @example
     * // Get one Financeiro
     * const financeiro = await prisma.financeiro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FinanceiroFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FinanceiroFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Financeiro'> extends True ? Prisma__FinanceiroClient<FinanceiroGetPayload<T>> : Prisma__FinanceiroClient<FinanceiroGetPayload<T> | null, null>

    /**
     * Find one Financeiro that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FinanceiroFindUniqueOrThrowArgs} args - Arguments to find a Financeiro
     * @example
     * // Get one Financeiro
     * const financeiro = await prisma.financeiro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FinanceiroFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FinanceiroFindUniqueOrThrowArgs>
    ): Prisma__FinanceiroClient<FinanceiroGetPayload<T>>

    /**
     * Find the first Financeiro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinanceiroFindFirstArgs} args - Arguments to find a Financeiro
     * @example
     * // Get one Financeiro
     * const financeiro = await prisma.financeiro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FinanceiroFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FinanceiroFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Financeiro'> extends True ? Prisma__FinanceiroClient<FinanceiroGetPayload<T>> : Prisma__FinanceiroClient<FinanceiroGetPayload<T> | null, null>

    /**
     * Find the first Financeiro that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinanceiroFindFirstOrThrowArgs} args - Arguments to find a Financeiro
     * @example
     * // Get one Financeiro
     * const financeiro = await prisma.financeiro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FinanceiroFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FinanceiroFindFirstOrThrowArgs>
    ): Prisma__FinanceiroClient<FinanceiroGetPayload<T>>

    /**
     * Find zero or more Financeiros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinanceiroFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Financeiros
     * const financeiros = await prisma.financeiro.findMany()
     * 
     * // Get first 10 Financeiros
     * const financeiros = await prisma.financeiro.findMany({ take: 10 })
     * 
     * // Only select the `fin_id`
     * const financeiroWithFin_idOnly = await prisma.financeiro.findMany({ select: { fin_id: true } })
     * 
    **/
    findMany<T extends FinanceiroFindManyArgs>(
      args?: SelectSubset<T, FinanceiroFindManyArgs>
    ): Prisma.PrismaPromise<Array<FinanceiroGetPayload<T>>>

    /**
     * Create a Financeiro.
     * @param {FinanceiroCreateArgs} args - Arguments to create a Financeiro.
     * @example
     * // Create one Financeiro
     * const Financeiro = await prisma.financeiro.create({
     *   data: {
     *     // ... data to create a Financeiro
     *   }
     * })
     * 
    **/
    create<T extends FinanceiroCreateArgs>(
      args: SelectSubset<T, FinanceiroCreateArgs>
    ): Prisma__FinanceiroClient<FinanceiroGetPayload<T>>

    /**
     * Delete a Financeiro.
     * @param {FinanceiroDeleteArgs} args - Arguments to delete one Financeiro.
     * @example
     * // Delete one Financeiro
     * const Financeiro = await prisma.financeiro.delete({
     *   where: {
     *     // ... filter to delete one Financeiro
     *   }
     * })
     * 
    **/
    delete<T extends FinanceiroDeleteArgs>(
      args: SelectSubset<T, FinanceiroDeleteArgs>
    ): Prisma__FinanceiroClient<FinanceiroGetPayload<T>>

    /**
     * Update one Financeiro.
     * @param {FinanceiroUpdateArgs} args - Arguments to update one Financeiro.
     * @example
     * // Update one Financeiro
     * const financeiro = await prisma.financeiro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FinanceiroUpdateArgs>(
      args: SelectSubset<T, FinanceiroUpdateArgs>
    ): Prisma__FinanceiroClient<FinanceiroGetPayload<T>>

    /**
     * Delete zero or more Financeiros.
     * @param {FinanceiroDeleteManyArgs} args - Arguments to filter Financeiros to delete.
     * @example
     * // Delete a few Financeiros
     * const { count } = await prisma.financeiro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FinanceiroDeleteManyArgs>(
      args?: SelectSubset<T, FinanceiroDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Financeiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinanceiroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Financeiros
     * const financeiro = await prisma.financeiro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FinanceiroUpdateManyArgs>(
      args: SelectSubset<T, FinanceiroUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Financeiro.
     * @param {FinanceiroUpsertArgs} args - Arguments to update or create a Financeiro.
     * @example
     * // Update or create a Financeiro
     * const financeiro = await prisma.financeiro.upsert({
     *   create: {
     *     // ... data to create a Financeiro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Financeiro we want to update
     *   }
     * })
    **/
    upsert<T extends FinanceiroUpsertArgs>(
      args: SelectSubset<T, FinanceiroUpsertArgs>
    ): Prisma__FinanceiroClient<FinanceiroGetPayload<T>>

    /**
     * Count the number of Financeiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinanceiroCountArgs} args - Arguments to filter Financeiros to count.
     * @example
     * // Count the number of Financeiros
     * const count = await prisma.financeiro.count({
     *   where: {
     *     // ... the filter for the Financeiros we want to count
     *   }
     * })
    **/
    count<T extends FinanceiroCountArgs>(
      args?: Subset<T, FinanceiroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinanceiroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Financeiro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinanceiroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinanceiroAggregateArgs>(args: Subset<T, FinanceiroAggregateArgs>): Prisma.PrismaPromise<GetFinanceiroAggregateType<T>>

    /**
     * Group by Financeiro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinanceiroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FinanceiroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FinanceiroGroupByArgs['orderBy'] }
        : { orderBy?: FinanceiroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FinanceiroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinanceiroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Financeiro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FinanceiroClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    documento<T extends DocumentoArgs= {}>(args?: Subset<T, DocumentoArgs>): Prisma__DocumentoClient<DocumentoGetPayload<T> | Null>;

    user<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    cliente<T extends clienteArgs= {}>(args?: Subset<T, clienteArgs>): Prisma__clienteClient<clienteGetPayload<T> | Null>;

    Fin_pago<T extends Financeiro$Fin_pagoArgs= {}>(args?: Subset<T, Financeiro$Fin_pagoArgs>): Prisma.PrismaPromise<Array<Fin_pagoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Financeiro base type for findUnique actions
   */
  export type FinanceiroFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    /**
     * Filter, which Financeiro to fetch.
     */
    where: FinanceiroWhereUniqueInput
  }

  /**
   * Financeiro findUnique
   */
  export interface FinanceiroFindUniqueArgs extends FinanceiroFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Financeiro findUniqueOrThrow
   */
  export type FinanceiroFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    /**
     * Filter, which Financeiro to fetch.
     */
    where: FinanceiroWhereUniqueInput
  }


  /**
   * Financeiro base type for findFirst actions
   */
  export type FinanceiroFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    /**
     * Filter, which Financeiro to fetch.
     */
    where?: FinanceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Financeiros to fetch.
     */
    orderBy?: Enumerable<FinanceiroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Financeiros.
     */
    cursor?: FinanceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Financeiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Financeiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Financeiros.
     */
    distinct?: Enumerable<FinanceiroScalarFieldEnum>
  }

  /**
   * Financeiro findFirst
   */
  export interface FinanceiroFindFirstArgs extends FinanceiroFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Financeiro findFirstOrThrow
   */
  export type FinanceiroFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    /**
     * Filter, which Financeiro to fetch.
     */
    where?: FinanceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Financeiros to fetch.
     */
    orderBy?: Enumerable<FinanceiroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Financeiros.
     */
    cursor?: FinanceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Financeiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Financeiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Financeiros.
     */
    distinct?: Enumerable<FinanceiroScalarFieldEnum>
  }


  /**
   * Financeiro findMany
   */
  export type FinanceiroFindManyArgs = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    /**
     * Filter, which Financeiros to fetch.
     */
    where?: FinanceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Financeiros to fetch.
     */
    orderBy?: Enumerable<FinanceiroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Financeiros.
     */
    cursor?: FinanceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Financeiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Financeiros.
     */
    skip?: number
    distinct?: Enumerable<FinanceiroScalarFieldEnum>
  }


  /**
   * Financeiro create
   */
  export type FinanceiroCreateArgs = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    /**
     * The data needed to create a Financeiro.
     */
    data: XOR<FinanceiroCreateInput, FinanceiroUncheckedCreateInput>
  }


  /**
   * Financeiro update
   */
  export type FinanceiroUpdateArgs = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    /**
     * The data needed to update a Financeiro.
     */
    data: XOR<FinanceiroUpdateInput, FinanceiroUncheckedUpdateInput>
    /**
     * Choose, which Financeiro to update.
     */
    where: FinanceiroWhereUniqueInput
  }


  /**
   * Financeiro updateMany
   */
  export type FinanceiroUpdateManyArgs = {
    /**
     * The data used to update Financeiros.
     */
    data: XOR<FinanceiroUpdateManyMutationInput, FinanceiroUncheckedUpdateManyInput>
    /**
     * Filter which Financeiros to update
     */
    where?: FinanceiroWhereInput
  }


  /**
   * Financeiro upsert
   */
  export type FinanceiroUpsertArgs = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    /**
     * The filter to search for the Financeiro to update in case it exists.
     */
    where: FinanceiroWhereUniqueInput
    /**
     * In case the Financeiro found by the `where` argument doesn't exist, create a new Financeiro with this data.
     */
    create: XOR<FinanceiroCreateInput, FinanceiroUncheckedCreateInput>
    /**
     * In case the Financeiro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FinanceiroUpdateInput, FinanceiroUncheckedUpdateInput>
  }


  /**
   * Financeiro delete
   */
  export type FinanceiroDeleteArgs = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
    /**
     * Filter which Financeiro to delete.
     */
    where: FinanceiroWhereUniqueInput
  }


  /**
   * Financeiro deleteMany
   */
  export type FinanceiroDeleteManyArgs = {
    /**
     * Filter which Financeiros to delete
     */
    where?: FinanceiroWhereInput
  }


  /**
   * Financeiro.Fin_pago
   */
  export type Financeiro$Fin_pagoArgs = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
    where?: Fin_pagoWhereInput
    orderBy?: Enumerable<Fin_pagoOrderByWithRelationInput>
    cursor?: Fin_pagoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Fin_pagoScalarFieldEnum>
  }


  /**
   * Financeiro without action
   */
  export type FinanceiroArgs = {
    /**
     * Select specific fields to fetch from the Financeiro
     */
    select?: FinanceiroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FinanceiroInclude | null
  }



  /**
   * Model Fin_pago
   */


  export type AggregateFin_pago = {
    _count: Fin_pagoCountAggregateOutputType | null
    _avg: Fin_pagoAvgAggregateOutputType | null
    _sum: Fin_pagoSumAggregateOutputType | null
    _min: Fin_pagoMinAggregateOutputType | null
    _max: Fin_pagoMaxAggregateOutputType | null
  }

  export type Fin_pagoAvgAggregateOutputType = {
    pago_id: number | null
    Fin_id: number | null
    usuarioId: number | null
    val_desc: Decimal | null
    val_juros: Decimal | null
  }

  export type Fin_pagoSumAggregateOutputType = {
    pago_id: number | null
    Fin_id: number | null
    usuarioId: number | null
    val_desc: Decimal | null
    val_juros: Decimal | null
  }

  export type Fin_pagoMinAggregateOutputType = {
    pago_id: number | null
    Fin_id: number | null
    usuarioId: number | null
    dt_pago: Date | null
    val_desc: Decimal | null
    val_juros: Decimal | null
  }

  export type Fin_pagoMaxAggregateOutputType = {
    pago_id: number | null
    Fin_id: number | null
    usuarioId: number | null
    dt_pago: Date | null
    val_desc: Decimal | null
    val_juros: Decimal | null
  }

  export type Fin_pagoCountAggregateOutputType = {
    pago_id: number
    Fin_id: number
    usuarioId: number
    dt_pago: number
    val_desc: number
    val_juros: number
    _all: number
  }


  export type Fin_pagoAvgAggregateInputType = {
    pago_id?: true
    Fin_id?: true
    usuarioId?: true
    val_desc?: true
    val_juros?: true
  }

  export type Fin_pagoSumAggregateInputType = {
    pago_id?: true
    Fin_id?: true
    usuarioId?: true
    val_desc?: true
    val_juros?: true
  }

  export type Fin_pagoMinAggregateInputType = {
    pago_id?: true
    Fin_id?: true
    usuarioId?: true
    dt_pago?: true
    val_desc?: true
    val_juros?: true
  }

  export type Fin_pagoMaxAggregateInputType = {
    pago_id?: true
    Fin_id?: true
    usuarioId?: true
    dt_pago?: true
    val_desc?: true
    val_juros?: true
  }

  export type Fin_pagoCountAggregateInputType = {
    pago_id?: true
    Fin_id?: true
    usuarioId?: true
    dt_pago?: true
    val_desc?: true
    val_juros?: true
    _all?: true
  }

  export type Fin_pagoAggregateArgs = {
    /**
     * Filter which Fin_pago to aggregate.
     */
    where?: Fin_pagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fin_pagos to fetch.
     */
    orderBy?: Enumerable<Fin_pagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Fin_pagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fin_pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fin_pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fin_pagos
    **/
    _count?: true | Fin_pagoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Fin_pagoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Fin_pagoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Fin_pagoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Fin_pagoMaxAggregateInputType
  }

  export type GetFin_pagoAggregateType<T extends Fin_pagoAggregateArgs> = {
        [P in keyof T & keyof AggregateFin_pago]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFin_pago[P]>
      : GetScalarType<T[P], AggregateFin_pago[P]>
  }




  export type Fin_pagoGroupByArgs = {
    where?: Fin_pagoWhereInput
    orderBy?: Enumerable<Fin_pagoOrderByWithAggregationInput>
    by: Fin_pagoScalarFieldEnum[]
    having?: Fin_pagoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Fin_pagoCountAggregateInputType | true
    _avg?: Fin_pagoAvgAggregateInputType
    _sum?: Fin_pagoSumAggregateInputType
    _min?: Fin_pagoMinAggregateInputType
    _max?: Fin_pagoMaxAggregateInputType
  }


  export type Fin_pagoGroupByOutputType = {
    pago_id: number
    Fin_id: number
    usuarioId: number
    dt_pago: Date
    val_desc: Decimal
    val_juros: Decimal
    _count: Fin_pagoCountAggregateOutputType | null
    _avg: Fin_pagoAvgAggregateOutputType | null
    _sum: Fin_pagoSumAggregateOutputType | null
    _min: Fin_pagoMinAggregateOutputType | null
    _max: Fin_pagoMaxAggregateOutputType | null
  }

  type GetFin_pagoGroupByPayload<T extends Fin_pagoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Fin_pagoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Fin_pagoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Fin_pagoGroupByOutputType[P]>
            : GetScalarType<T[P], Fin_pagoGroupByOutputType[P]>
        }
      >
    >


  export type Fin_pagoSelect = {
    pago_id?: boolean
    Fin_id?: boolean
    usuarioId?: boolean
    dt_pago?: boolean
    val_desc?: boolean
    val_juros?: boolean
    financeiro?: boolean | FinanceiroArgs
    user?: boolean | UsuarioArgs
  }


  export type Fin_pagoInclude = {
    financeiro?: boolean | FinanceiroArgs
    user?: boolean | UsuarioArgs
  }

  export type Fin_pagoGetPayload<S extends boolean | null | undefined | Fin_pagoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Fin_pago :
    S extends undefined ? never :
    S extends { include: any } & (Fin_pagoArgs | Fin_pagoFindManyArgs)
    ? Fin_pago  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'financeiro' ? FinanceiroGetPayload<S['include'][P]> :
        P extends 'user' ? UsuarioGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Fin_pagoArgs | Fin_pagoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'financeiro' ? FinanceiroGetPayload<S['select'][P]> :
        P extends 'user' ? UsuarioGetPayload<S['select'][P]> :  P extends keyof Fin_pago ? Fin_pago[P] : never
  } 
      : Fin_pago


  type Fin_pagoCountArgs = 
    Omit<Fin_pagoFindManyArgs, 'select' | 'include'> & {
      select?: Fin_pagoCountAggregateInputType | true
    }

  export interface Fin_pagoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Fin_pago that matches the filter.
     * @param {Fin_pagoFindUniqueArgs} args - Arguments to find a Fin_pago
     * @example
     * // Get one Fin_pago
     * const fin_pago = await prisma.fin_pago.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Fin_pagoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Fin_pagoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Fin_pago'> extends True ? Prisma__Fin_pagoClient<Fin_pagoGetPayload<T>> : Prisma__Fin_pagoClient<Fin_pagoGetPayload<T> | null, null>

    /**
     * Find one Fin_pago that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Fin_pagoFindUniqueOrThrowArgs} args - Arguments to find a Fin_pago
     * @example
     * // Get one Fin_pago
     * const fin_pago = await prisma.fin_pago.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Fin_pagoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Fin_pagoFindUniqueOrThrowArgs>
    ): Prisma__Fin_pagoClient<Fin_pagoGetPayload<T>>

    /**
     * Find the first Fin_pago that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fin_pagoFindFirstArgs} args - Arguments to find a Fin_pago
     * @example
     * // Get one Fin_pago
     * const fin_pago = await prisma.fin_pago.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Fin_pagoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Fin_pagoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Fin_pago'> extends True ? Prisma__Fin_pagoClient<Fin_pagoGetPayload<T>> : Prisma__Fin_pagoClient<Fin_pagoGetPayload<T> | null, null>

    /**
     * Find the first Fin_pago that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fin_pagoFindFirstOrThrowArgs} args - Arguments to find a Fin_pago
     * @example
     * // Get one Fin_pago
     * const fin_pago = await prisma.fin_pago.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Fin_pagoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Fin_pagoFindFirstOrThrowArgs>
    ): Prisma__Fin_pagoClient<Fin_pagoGetPayload<T>>

    /**
     * Find zero or more Fin_pagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fin_pagoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fin_pagos
     * const fin_pagos = await prisma.fin_pago.findMany()
     * 
     * // Get first 10 Fin_pagos
     * const fin_pagos = await prisma.fin_pago.findMany({ take: 10 })
     * 
     * // Only select the `pago_id`
     * const fin_pagoWithPago_idOnly = await prisma.fin_pago.findMany({ select: { pago_id: true } })
     * 
    **/
    findMany<T extends Fin_pagoFindManyArgs>(
      args?: SelectSubset<T, Fin_pagoFindManyArgs>
    ): Prisma.PrismaPromise<Array<Fin_pagoGetPayload<T>>>

    /**
     * Create a Fin_pago.
     * @param {Fin_pagoCreateArgs} args - Arguments to create a Fin_pago.
     * @example
     * // Create one Fin_pago
     * const Fin_pago = await prisma.fin_pago.create({
     *   data: {
     *     // ... data to create a Fin_pago
     *   }
     * })
     * 
    **/
    create<T extends Fin_pagoCreateArgs>(
      args: SelectSubset<T, Fin_pagoCreateArgs>
    ): Prisma__Fin_pagoClient<Fin_pagoGetPayload<T>>

    /**
     * Delete a Fin_pago.
     * @param {Fin_pagoDeleteArgs} args - Arguments to delete one Fin_pago.
     * @example
     * // Delete one Fin_pago
     * const Fin_pago = await prisma.fin_pago.delete({
     *   where: {
     *     // ... filter to delete one Fin_pago
     *   }
     * })
     * 
    **/
    delete<T extends Fin_pagoDeleteArgs>(
      args: SelectSubset<T, Fin_pagoDeleteArgs>
    ): Prisma__Fin_pagoClient<Fin_pagoGetPayload<T>>

    /**
     * Update one Fin_pago.
     * @param {Fin_pagoUpdateArgs} args - Arguments to update one Fin_pago.
     * @example
     * // Update one Fin_pago
     * const fin_pago = await prisma.fin_pago.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Fin_pagoUpdateArgs>(
      args: SelectSubset<T, Fin_pagoUpdateArgs>
    ): Prisma__Fin_pagoClient<Fin_pagoGetPayload<T>>

    /**
     * Delete zero or more Fin_pagos.
     * @param {Fin_pagoDeleteManyArgs} args - Arguments to filter Fin_pagos to delete.
     * @example
     * // Delete a few Fin_pagos
     * const { count } = await prisma.fin_pago.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Fin_pagoDeleteManyArgs>(
      args?: SelectSubset<T, Fin_pagoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fin_pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fin_pagoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fin_pagos
     * const fin_pago = await prisma.fin_pago.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Fin_pagoUpdateManyArgs>(
      args: SelectSubset<T, Fin_pagoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fin_pago.
     * @param {Fin_pagoUpsertArgs} args - Arguments to update or create a Fin_pago.
     * @example
     * // Update or create a Fin_pago
     * const fin_pago = await prisma.fin_pago.upsert({
     *   create: {
     *     // ... data to create a Fin_pago
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fin_pago we want to update
     *   }
     * })
    **/
    upsert<T extends Fin_pagoUpsertArgs>(
      args: SelectSubset<T, Fin_pagoUpsertArgs>
    ): Prisma__Fin_pagoClient<Fin_pagoGetPayload<T>>

    /**
     * Count the number of Fin_pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fin_pagoCountArgs} args - Arguments to filter Fin_pagos to count.
     * @example
     * // Count the number of Fin_pagos
     * const count = await prisma.fin_pago.count({
     *   where: {
     *     // ... the filter for the Fin_pagos we want to count
     *   }
     * })
    **/
    count<T extends Fin_pagoCountArgs>(
      args?: Subset<T, Fin_pagoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Fin_pagoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fin_pago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fin_pagoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Fin_pagoAggregateArgs>(args: Subset<T, Fin_pagoAggregateArgs>): Prisma.PrismaPromise<GetFin_pagoAggregateType<T>>

    /**
     * Group by Fin_pago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fin_pagoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Fin_pagoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Fin_pagoGroupByArgs['orderBy'] }
        : { orderBy?: Fin_pagoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Fin_pagoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFin_pagoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Fin_pago.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Fin_pagoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    financeiro<T extends FinanceiroArgs= {}>(args?: Subset<T, FinanceiroArgs>): Prisma__FinanceiroClient<FinanceiroGetPayload<T> | Null>;

    user<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Fin_pago base type for findUnique actions
   */
  export type Fin_pagoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
    /**
     * Filter, which Fin_pago to fetch.
     */
    where: Fin_pagoWhereUniqueInput
  }

  /**
   * Fin_pago findUnique
   */
  export interface Fin_pagoFindUniqueArgs extends Fin_pagoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fin_pago findUniqueOrThrow
   */
  export type Fin_pagoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
    /**
     * Filter, which Fin_pago to fetch.
     */
    where: Fin_pagoWhereUniqueInput
  }


  /**
   * Fin_pago base type for findFirst actions
   */
  export type Fin_pagoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
    /**
     * Filter, which Fin_pago to fetch.
     */
    where?: Fin_pagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fin_pagos to fetch.
     */
    orderBy?: Enumerable<Fin_pagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fin_pagos.
     */
    cursor?: Fin_pagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fin_pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fin_pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fin_pagos.
     */
    distinct?: Enumerable<Fin_pagoScalarFieldEnum>
  }

  /**
   * Fin_pago findFirst
   */
  export interface Fin_pagoFindFirstArgs extends Fin_pagoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fin_pago findFirstOrThrow
   */
  export type Fin_pagoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
    /**
     * Filter, which Fin_pago to fetch.
     */
    where?: Fin_pagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fin_pagos to fetch.
     */
    orderBy?: Enumerable<Fin_pagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fin_pagos.
     */
    cursor?: Fin_pagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fin_pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fin_pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fin_pagos.
     */
    distinct?: Enumerable<Fin_pagoScalarFieldEnum>
  }


  /**
   * Fin_pago findMany
   */
  export type Fin_pagoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
    /**
     * Filter, which Fin_pagos to fetch.
     */
    where?: Fin_pagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fin_pagos to fetch.
     */
    orderBy?: Enumerable<Fin_pagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fin_pagos.
     */
    cursor?: Fin_pagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fin_pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fin_pagos.
     */
    skip?: number
    distinct?: Enumerable<Fin_pagoScalarFieldEnum>
  }


  /**
   * Fin_pago create
   */
  export type Fin_pagoCreateArgs = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
    /**
     * The data needed to create a Fin_pago.
     */
    data: XOR<Fin_pagoCreateInput, Fin_pagoUncheckedCreateInput>
  }


  /**
   * Fin_pago update
   */
  export type Fin_pagoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
    /**
     * The data needed to update a Fin_pago.
     */
    data: XOR<Fin_pagoUpdateInput, Fin_pagoUncheckedUpdateInput>
    /**
     * Choose, which Fin_pago to update.
     */
    where: Fin_pagoWhereUniqueInput
  }


  /**
   * Fin_pago updateMany
   */
  export type Fin_pagoUpdateManyArgs = {
    /**
     * The data used to update Fin_pagos.
     */
    data: XOR<Fin_pagoUpdateManyMutationInput, Fin_pagoUncheckedUpdateManyInput>
    /**
     * Filter which Fin_pagos to update
     */
    where?: Fin_pagoWhereInput
  }


  /**
   * Fin_pago upsert
   */
  export type Fin_pagoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
    /**
     * The filter to search for the Fin_pago to update in case it exists.
     */
    where: Fin_pagoWhereUniqueInput
    /**
     * In case the Fin_pago found by the `where` argument doesn't exist, create a new Fin_pago with this data.
     */
    create: XOR<Fin_pagoCreateInput, Fin_pagoUncheckedCreateInput>
    /**
     * In case the Fin_pago was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Fin_pagoUpdateInput, Fin_pagoUncheckedUpdateInput>
  }


  /**
   * Fin_pago delete
   */
  export type Fin_pagoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
    /**
     * Filter which Fin_pago to delete.
     */
    where: Fin_pagoWhereUniqueInput
  }


  /**
   * Fin_pago deleteMany
   */
  export type Fin_pagoDeleteManyArgs = {
    /**
     * Filter which Fin_pagos to delete
     */
    where?: Fin_pagoWhereInput
  }


  /**
   * Fin_pago without action
   */
  export type Fin_pagoArgs = {
    /**
     * Select specific fields to fetch from the Fin_pago
     */
    select?: Fin_pagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Fin_pagoInclude | null
  }



  /**
   * Model Movimentacao
   */


  export type AggregateMovimentacao = {
    _count: MovimentacaoCountAggregateOutputType | null
    _avg: MovimentacaoAvgAggregateOutputType | null
    _sum: MovimentacaoSumAggregateOutputType | null
    _min: MovimentacaoMinAggregateOutputType | null
    _max: MovimentacaoMaxAggregateOutputType | null
  }

  export type MovimentacaoAvgAggregateOutputType = {
    mov_id: number | null
    quantidade: number | null
  }

  export type MovimentacaoSumAggregateOutputType = {
    mov_id: number | null
    quantidade: number | null
  }

  export type MovimentacaoMinAggregateOutputType = {
    mov_id: number | null
    descricao: string | null
    entrada: boolean | null
    saida: boolean | null
    quantidade: number | null
  }

  export type MovimentacaoMaxAggregateOutputType = {
    mov_id: number | null
    descricao: string | null
    entrada: boolean | null
    saida: boolean | null
    quantidade: number | null
  }

  export type MovimentacaoCountAggregateOutputType = {
    mov_id: number
    descricao: number
    entrada: number
    saida: number
    quantidade: number
    _all: number
  }


  export type MovimentacaoAvgAggregateInputType = {
    mov_id?: true
    quantidade?: true
  }

  export type MovimentacaoSumAggregateInputType = {
    mov_id?: true
    quantidade?: true
  }

  export type MovimentacaoMinAggregateInputType = {
    mov_id?: true
    descricao?: true
    entrada?: true
    saida?: true
    quantidade?: true
  }

  export type MovimentacaoMaxAggregateInputType = {
    mov_id?: true
    descricao?: true
    entrada?: true
    saida?: true
    quantidade?: true
  }

  export type MovimentacaoCountAggregateInputType = {
    mov_id?: true
    descricao?: true
    entrada?: true
    saida?: true
    quantidade?: true
    _all?: true
  }

  export type MovimentacaoAggregateArgs = {
    /**
     * Filter which Movimentacao to aggregate.
     */
    where?: MovimentacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movimentacaos to fetch.
     */
    orderBy?: Enumerable<MovimentacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovimentacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movimentacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movimentacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Movimentacaos
    **/
    _count?: true | MovimentacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovimentacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovimentacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovimentacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovimentacaoMaxAggregateInputType
  }

  export type GetMovimentacaoAggregateType<T extends MovimentacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateMovimentacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovimentacao[P]>
      : GetScalarType<T[P], AggregateMovimentacao[P]>
  }




  export type MovimentacaoGroupByArgs = {
    where?: MovimentacaoWhereInput
    orderBy?: Enumerable<MovimentacaoOrderByWithAggregationInput>
    by: MovimentacaoScalarFieldEnum[]
    having?: MovimentacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovimentacaoCountAggregateInputType | true
    _avg?: MovimentacaoAvgAggregateInputType
    _sum?: MovimentacaoSumAggregateInputType
    _min?: MovimentacaoMinAggregateInputType
    _max?: MovimentacaoMaxAggregateInputType
  }


  export type MovimentacaoGroupByOutputType = {
    mov_id: number
    descricao: string
    entrada: boolean
    saida: boolean
    quantidade: number
    _count: MovimentacaoCountAggregateOutputType | null
    _avg: MovimentacaoAvgAggregateOutputType | null
    _sum: MovimentacaoSumAggregateOutputType | null
    _min: MovimentacaoMinAggregateOutputType | null
    _max: MovimentacaoMaxAggregateOutputType | null
  }

  type GetMovimentacaoGroupByPayload<T extends MovimentacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MovimentacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovimentacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovimentacaoGroupByOutputType[P]>
            : GetScalarType<T[P], MovimentacaoGroupByOutputType[P]>
        }
      >
    >


  export type MovimentacaoSelect = {
    mov_id?: boolean
    descricao?: boolean
    entrada?: boolean
    saida?: boolean
    quantidade?: boolean
  }


  export type MovimentacaoGetPayload<S extends boolean | null | undefined | MovimentacaoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Movimentacao :
    S extends undefined ? never :
    S extends { include: any } & (MovimentacaoArgs | MovimentacaoFindManyArgs)
    ? Movimentacao 
    : S extends { select: any } & (MovimentacaoArgs | MovimentacaoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Movimentacao ? Movimentacao[P] : never
  } 
      : Movimentacao


  type MovimentacaoCountArgs = 
    Omit<MovimentacaoFindManyArgs, 'select' | 'include'> & {
      select?: MovimentacaoCountAggregateInputType | true
    }

  export interface MovimentacaoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Movimentacao that matches the filter.
     * @param {MovimentacaoFindUniqueArgs} args - Arguments to find a Movimentacao
     * @example
     * // Get one Movimentacao
     * const movimentacao = await prisma.movimentacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MovimentacaoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MovimentacaoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Movimentacao'> extends True ? Prisma__MovimentacaoClient<MovimentacaoGetPayload<T>> : Prisma__MovimentacaoClient<MovimentacaoGetPayload<T> | null, null>

    /**
     * Find one Movimentacao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MovimentacaoFindUniqueOrThrowArgs} args - Arguments to find a Movimentacao
     * @example
     * // Get one Movimentacao
     * const movimentacao = await prisma.movimentacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MovimentacaoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MovimentacaoFindUniqueOrThrowArgs>
    ): Prisma__MovimentacaoClient<MovimentacaoGetPayload<T>>

    /**
     * Find the first Movimentacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoFindFirstArgs} args - Arguments to find a Movimentacao
     * @example
     * // Get one Movimentacao
     * const movimentacao = await prisma.movimentacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MovimentacaoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MovimentacaoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Movimentacao'> extends True ? Prisma__MovimentacaoClient<MovimentacaoGetPayload<T>> : Prisma__MovimentacaoClient<MovimentacaoGetPayload<T> | null, null>

    /**
     * Find the first Movimentacao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoFindFirstOrThrowArgs} args - Arguments to find a Movimentacao
     * @example
     * // Get one Movimentacao
     * const movimentacao = await prisma.movimentacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MovimentacaoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MovimentacaoFindFirstOrThrowArgs>
    ): Prisma__MovimentacaoClient<MovimentacaoGetPayload<T>>

    /**
     * Find zero or more Movimentacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movimentacaos
     * const movimentacaos = await prisma.movimentacao.findMany()
     * 
     * // Get first 10 Movimentacaos
     * const movimentacaos = await prisma.movimentacao.findMany({ take: 10 })
     * 
     * // Only select the `mov_id`
     * const movimentacaoWithMov_idOnly = await prisma.movimentacao.findMany({ select: { mov_id: true } })
     * 
    **/
    findMany<T extends MovimentacaoFindManyArgs>(
      args?: SelectSubset<T, MovimentacaoFindManyArgs>
    ): Prisma.PrismaPromise<Array<MovimentacaoGetPayload<T>>>

    /**
     * Create a Movimentacao.
     * @param {MovimentacaoCreateArgs} args - Arguments to create a Movimentacao.
     * @example
     * // Create one Movimentacao
     * const Movimentacao = await prisma.movimentacao.create({
     *   data: {
     *     // ... data to create a Movimentacao
     *   }
     * })
     * 
    **/
    create<T extends MovimentacaoCreateArgs>(
      args: SelectSubset<T, MovimentacaoCreateArgs>
    ): Prisma__MovimentacaoClient<MovimentacaoGetPayload<T>>

    /**
     * Delete a Movimentacao.
     * @param {MovimentacaoDeleteArgs} args - Arguments to delete one Movimentacao.
     * @example
     * // Delete one Movimentacao
     * const Movimentacao = await prisma.movimentacao.delete({
     *   where: {
     *     // ... filter to delete one Movimentacao
     *   }
     * })
     * 
    **/
    delete<T extends MovimentacaoDeleteArgs>(
      args: SelectSubset<T, MovimentacaoDeleteArgs>
    ): Prisma__MovimentacaoClient<MovimentacaoGetPayload<T>>

    /**
     * Update one Movimentacao.
     * @param {MovimentacaoUpdateArgs} args - Arguments to update one Movimentacao.
     * @example
     * // Update one Movimentacao
     * const movimentacao = await prisma.movimentacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MovimentacaoUpdateArgs>(
      args: SelectSubset<T, MovimentacaoUpdateArgs>
    ): Prisma__MovimentacaoClient<MovimentacaoGetPayload<T>>

    /**
     * Delete zero or more Movimentacaos.
     * @param {MovimentacaoDeleteManyArgs} args - Arguments to filter Movimentacaos to delete.
     * @example
     * // Delete a few Movimentacaos
     * const { count } = await prisma.movimentacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MovimentacaoDeleteManyArgs>(
      args?: SelectSubset<T, MovimentacaoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movimentacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movimentacaos
     * const movimentacao = await prisma.movimentacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MovimentacaoUpdateManyArgs>(
      args: SelectSubset<T, MovimentacaoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Movimentacao.
     * @param {MovimentacaoUpsertArgs} args - Arguments to update or create a Movimentacao.
     * @example
     * // Update or create a Movimentacao
     * const movimentacao = await prisma.movimentacao.upsert({
     *   create: {
     *     // ... data to create a Movimentacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movimentacao we want to update
     *   }
     * })
    **/
    upsert<T extends MovimentacaoUpsertArgs>(
      args: SelectSubset<T, MovimentacaoUpsertArgs>
    ): Prisma__MovimentacaoClient<MovimentacaoGetPayload<T>>

    /**
     * Count the number of Movimentacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoCountArgs} args - Arguments to filter Movimentacaos to count.
     * @example
     * // Count the number of Movimentacaos
     * const count = await prisma.movimentacao.count({
     *   where: {
     *     // ... the filter for the Movimentacaos we want to count
     *   }
     * })
    **/
    count<T extends MovimentacaoCountArgs>(
      args?: Subset<T, MovimentacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovimentacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Movimentacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovimentacaoAggregateArgs>(args: Subset<T, MovimentacaoAggregateArgs>): Prisma.PrismaPromise<GetMovimentacaoAggregateType<T>>

    /**
     * Group by Movimentacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovimentacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovimentacaoGroupByArgs['orderBy'] }
        : { orderBy?: MovimentacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovimentacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovimentacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Movimentacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MovimentacaoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Movimentacao base type for findUnique actions
   */
  export type MovimentacaoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Movimentacao
     */
    select?: MovimentacaoSelect | null
    /**
     * Filter, which Movimentacao to fetch.
     */
    where: MovimentacaoWhereUniqueInput
  }

  /**
   * Movimentacao findUnique
   */
  export interface MovimentacaoFindUniqueArgs extends MovimentacaoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Movimentacao findUniqueOrThrow
   */
  export type MovimentacaoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Movimentacao
     */
    select?: MovimentacaoSelect | null
    /**
     * Filter, which Movimentacao to fetch.
     */
    where: MovimentacaoWhereUniqueInput
  }


  /**
   * Movimentacao base type for findFirst actions
   */
  export type MovimentacaoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Movimentacao
     */
    select?: MovimentacaoSelect | null
    /**
     * Filter, which Movimentacao to fetch.
     */
    where?: MovimentacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movimentacaos to fetch.
     */
    orderBy?: Enumerable<MovimentacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movimentacaos.
     */
    cursor?: MovimentacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movimentacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movimentacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movimentacaos.
     */
    distinct?: Enumerable<MovimentacaoScalarFieldEnum>
  }

  /**
   * Movimentacao findFirst
   */
  export interface MovimentacaoFindFirstArgs extends MovimentacaoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Movimentacao findFirstOrThrow
   */
  export type MovimentacaoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Movimentacao
     */
    select?: MovimentacaoSelect | null
    /**
     * Filter, which Movimentacao to fetch.
     */
    where?: MovimentacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movimentacaos to fetch.
     */
    orderBy?: Enumerable<MovimentacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movimentacaos.
     */
    cursor?: MovimentacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movimentacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movimentacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movimentacaos.
     */
    distinct?: Enumerable<MovimentacaoScalarFieldEnum>
  }


  /**
   * Movimentacao findMany
   */
  export type MovimentacaoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Movimentacao
     */
    select?: MovimentacaoSelect | null
    /**
     * Filter, which Movimentacaos to fetch.
     */
    where?: MovimentacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movimentacaos to fetch.
     */
    orderBy?: Enumerable<MovimentacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Movimentacaos.
     */
    cursor?: MovimentacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movimentacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movimentacaos.
     */
    skip?: number
    distinct?: Enumerable<MovimentacaoScalarFieldEnum>
  }


  /**
   * Movimentacao create
   */
  export type MovimentacaoCreateArgs = {
    /**
     * Select specific fields to fetch from the Movimentacao
     */
    select?: MovimentacaoSelect | null
    /**
     * The data needed to create a Movimentacao.
     */
    data: XOR<MovimentacaoCreateInput, MovimentacaoUncheckedCreateInput>
  }


  /**
   * Movimentacao update
   */
  export type MovimentacaoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Movimentacao
     */
    select?: MovimentacaoSelect | null
    /**
     * The data needed to update a Movimentacao.
     */
    data: XOR<MovimentacaoUpdateInput, MovimentacaoUncheckedUpdateInput>
    /**
     * Choose, which Movimentacao to update.
     */
    where: MovimentacaoWhereUniqueInput
  }


  /**
   * Movimentacao updateMany
   */
  export type MovimentacaoUpdateManyArgs = {
    /**
     * The data used to update Movimentacaos.
     */
    data: XOR<MovimentacaoUpdateManyMutationInput, MovimentacaoUncheckedUpdateManyInput>
    /**
     * Filter which Movimentacaos to update
     */
    where?: MovimentacaoWhereInput
  }


  /**
   * Movimentacao upsert
   */
  export type MovimentacaoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Movimentacao
     */
    select?: MovimentacaoSelect | null
    /**
     * The filter to search for the Movimentacao to update in case it exists.
     */
    where: MovimentacaoWhereUniqueInput
    /**
     * In case the Movimentacao found by the `where` argument doesn't exist, create a new Movimentacao with this data.
     */
    create: XOR<MovimentacaoCreateInput, MovimentacaoUncheckedCreateInput>
    /**
     * In case the Movimentacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovimentacaoUpdateInput, MovimentacaoUncheckedUpdateInput>
  }


  /**
   * Movimentacao delete
   */
  export type MovimentacaoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Movimentacao
     */
    select?: MovimentacaoSelect | null
    /**
     * Filter which Movimentacao to delete.
     */
    where: MovimentacaoWhereUniqueInput
  }


  /**
   * Movimentacao deleteMany
   */
  export type MovimentacaoDeleteManyArgs = {
    /**
     * Filter which Movimentacaos to delete
     */
    where?: MovimentacaoWhereInput
  }


  /**
   * Movimentacao without action
   */
  export type MovimentacaoArgs = {
    /**
     * Select specific fields to fetch from the Movimentacao
     */
    select?: MovimentacaoSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ClienteScalarFieldEnum: {
    cliente_id: 'cliente_id',
    cpfCnpj: 'cpfCnpj',
    email: 'email',
    nome: 'nome',
    telefone: 'telefone',
    endereco: 'endereco',
    numero: 'numero'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const ContaScalarFieldEnum: {
    id_conta: 'id_conta',
    nome: 'nome',
    Saldo: 'Saldo'
  };

  export type ContaScalarFieldEnum = (typeof ContaScalarFieldEnum)[keyof typeof ContaScalarFieldEnum]


  export const DocumentoScalarFieldEnum: {
    doc_controle: 'doc_controle',
    usuarioId: 'usuarioId',
    id_cliente: 'id_cliente',
    valor: 'valor',
    contaId_conta: 'contaId_conta'
  };

  export type DocumentoScalarFieldEnum = (typeof DocumentoScalarFieldEnum)[keyof typeof DocumentoScalarFieldEnum]


  export const Fin_pagoScalarFieldEnum: {
    pago_id: 'pago_id',
    Fin_id: 'Fin_id',
    usuarioId: 'usuarioId',
    dt_pago: 'dt_pago',
    val_desc: 'val_desc',
    val_juros: 'val_juros'
  };

  export type Fin_pagoScalarFieldEnum = (typeof Fin_pagoScalarFieldEnum)[keyof typeof Fin_pagoScalarFieldEnum]


  export const FinanceiroScalarFieldEnum: {
    fin_id: 'fin_id',
    Cliente_id: 'Cliente_id',
    documentoDoc_controle: 'documentoDoc_controle',
    usuarioId: 'usuarioId',
    dt_create: 'dt_create',
    dt_vencimento: 'dt_vencimento',
    pago: 'pago',
    cancelado: 'cancelado',
    valor: 'valor'
  };

  export type FinanceiroScalarFieldEnum = (typeof FinanceiroScalarFieldEnum)[keyof typeof FinanceiroScalarFieldEnum]


  export const MovimentacaoScalarFieldEnum: {
    mov_id: 'mov_id',
    descricao: 'descricao',
    entrada: 'entrada',
    saida: 'saida',
    quantidade: 'quantidade'
  };

  export type MovimentacaoScalarFieldEnum = (typeof MovimentacaoScalarFieldEnum)[keyof typeof MovimentacaoScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id_produto: 'id_produto',
    cod_barras: 'cod_barras',
    descricao: 'descricao',
    valor_v: 'valor_v',
    valor_c: 'valor_c',
    estoque: 'estoque'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    senha: 'senha'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: Enumerable<UsuarioWhereInput>
    OR?: Enumerable<UsuarioWhereInput>
    NOT?: Enumerable<UsuarioWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    senha?: StringFilter | string
    Financeiro?: FinanceiroListRelationFilter
    Fin_pago?: Fin_pagoListRelationFilter
    Documento?: DocumentoListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    Financeiro?: FinanceiroOrderByRelationAggregateInput
    Fin_pago?: Fin_pagoOrderByRelationAggregateInput
    Documento?: DocumentoOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = {
    id?: number
  }

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    senha?: StringWithAggregatesFilter | string
  }

  export type ContaWhereInput = {
    AND?: Enumerable<ContaWhereInput>
    OR?: Enumerable<ContaWhereInput>
    NOT?: Enumerable<ContaWhereInput>
    id_conta?: IntFilter | number
    nome?: StringFilter | string
    Saldo?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Documento?: DocumentoListRelationFilter
  }

  export type ContaOrderByWithRelationInput = {
    id_conta?: SortOrder
    nome?: SortOrder
    Saldo?: SortOrder
    Documento?: DocumentoOrderByRelationAggregateInput
  }

  export type ContaWhereUniqueInput = {
    id_conta?: number
  }

  export type ContaOrderByWithAggregationInput = {
    id_conta?: SortOrder
    nome?: SortOrder
    Saldo?: SortOrder
    _count?: ContaCountOrderByAggregateInput
    _avg?: ContaAvgOrderByAggregateInput
    _max?: ContaMaxOrderByAggregateInput
    _min?: ContaMinOrderByAggregateInput
    _sum?: ContaSumOrderByAggregateInput
  }

  export type ContaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContaScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContaScalarWhereWithAggregatesInput>
    id_conta?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    Saldo?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type ProdutoWhereInput = {
    AND?: Enumerable<ProdutoWhereInput>
    OR?: Enumerable<ProdutoWhereInput>
    NOT?: Enumerable<ProdutoWhereInput>
    id_produto?: IntFilter | number
    cod_barras?: StringFilter | string
    descricao?: StringFilter | string
    valor_v?: DecimalFilter | Decimal | DecimalJsLike | number | string
    valor_c?: DecimalFilter | Decimal | DecimalJsLike | number | string
    estoque?: IntFilter | number
  }

  export type ProdutoOrderByWithRelationInput = {
    id_produto?: SortOrder
    cod_barras?: SortOrder
    descricao?: SortOrder
    valor_v?: SortOrder
    valor_c?: SortOrder
    estoque?: SortOrder
  }

  export type ProdutoWhereUniqueInput = {
    id_produto?: number
  }

  export type ProdutoOrderByWithAggregationInput = {
    id_produto?: SortOrder
    cod_barras?: SortOrder
    descricao?: SortOrder
    valor_v?: SortOrder
    valor_c?: SortOrder
    estoque?: SortOrder
    _count?: ProdutoCountOrderByAggregateInput
    _avg?: ProdutoAvgOrderByAggregateInput
    _max?: ProdutoMaxOrderByAggregateInput
    _min?: ProdutoMinOrderByAggregateInput
    _sum?: ProdutoSumOrderByAggregateInput
  }

  export type ProdutoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProdutoScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProdutoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProdutoScalarWhereWithAggregatesInput>
    id_produto?: IntWithAggregatesFilter | number
    cod_barras?: StringWithAggregatesFilter | string
    descricao?: StringWithAggregatesFilter | string
    valor_v?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    valor_c?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    estoque?: IntWithAggregatesFilter | number
  }

  export type DocumentoWhereInput = {
    AND?: Enumerable<DocumentoWhereInput>
    OR?: Enumerable<DocumentoWhereInput>
    NOT?: Enumerable<DocumentoWhereInput>
    doc_controle?: IntFilter | number
    usuarioId?: IntFilter | number
    id_cliente?: IntFilter | number
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    contaId_conta?: IntFilter | number
    Financeiro?: FinanceiroListRelationFilter
    user?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    conta?: XOR<ContaRelationFilter, ContaWhereInput>
  }

  export type DocumentoOrderByWithRelationInput = {
    doc_controle?: SortOrder
    usuarioId?: SortOrder
    id_cliente?: SortOrder
    valor?: SortOrder
    contaId_conta?: SortOrder
    Financeiro?: FinanceiroOrderByRelationAggregateInput
    user?: UsuarioOrderByWithRelationInput
    conta?: ContaOrderByWithRelationInput
  }

  export type DocumentoWhereUniqueInput = {
    doc_controle?: number
  }

  export type DocumentoOrderByWithAggregationInput = {
    doc_controle?: SortOrder
    usuarioId?: SortOrder
    id_cliente?: SortOrder
    valor?: SortOrder
    contaId_conta?: SortOrder
    _count?: DocumentoCountOrderByAggregateInput
    _avg?: DocumentoAvgOrderByAggregateInput
    _max?: DocumentoMaxOrderByAggregateInput
    _min?: DocumentoMinOrderByAggregateInput
    _sum?: DocumentoSumOrderByAggregateInput
  }

  export type DocumentoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DocumentoScalarWhereWithAggregatesInput>
    OR?: Enumerable<DocumentoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DocumentoScalarWhereWithAggregatesInput>
    doc_controle?: IntWithAggregatesFilter | number
    usuarioId?: IntWithAggregatesFilter | number
    id_cliente?: IntWithAggregatesFilter | number
    valor?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    contaId_conta?: IntWithAggregatesFilter | number
  }

  export type clienteWhereInput = {
    AND?: Enumerable<clienteWhereInput>
    OR?: Enumerable<clienteWhereInput>
    NOT?: Enumerable<clienteWhereInput>
    cliente_id?: IntFilter | number
    cpfCnpj?: StringFilter | string
    email?: StringFilter | string
    nome?: StringFilter | string
    telefone?: StringFilter | string
    endereco?: StringFilter | string
    numero?: IntFilter | number
    Financeiro?: FinanceiroListRelationFilter
  }

  export type clienteOrderByWithRelationInput = {
    cliente_id?: SortOrder
    cpfCnpj?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    Financeiro?: FinanceiroOrderByRelationAggregateInput
  }

  export type clienteWhereUniqueInput = {
    cliente_id?: number
    cpfCnpj?: string
  }

  export type clienteOrderByWithAggregationInput = {
    cliente_id?: SortOrder
    cpfCnpj?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    _count?: clienteCountOrderByAggregateInput
    _avg?: clienteAvgOrderByAggregateInput
    _max?: clienteMaxOrderByAggregateInput
    _min?: clienteMinOrderByAggregateInput
    _sum?: clienteSumOrderByAggregateInput
  }

  export type clienteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<clienteScalarWhereWithAggregatesInput>
    OR?: Enumerable<clienteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<clienteScalarWhereWithAggregatesInput>
    cliente_id?: IntWithAggregatesFilter | number
    cpfCnpj?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    telefone?: StringWithAggregatesFilter | string
    endereco?: StringWithAggregatesFilter | string
    numero?: IntWithAggregatesFilter | number
  }

  export type FinanceiroWhereInput = {
    AND?: Enumerable<FinanceiroWhereInput>
    OR?: Enumerable<FinanceiroWhereInput>
    NOT?: Enumerable<FinanceiroWhereInput>
    fin_id?: IntFilter | number
    Cliente_id?: IntFilter | number
    documentoDoc_controle?: IntFilter | number
    usuarioId?: IntFilter | number
    dt_create?: DateTimeFilter | Date | string
    dt_vencimento?: DateTimeFilter | Date | string
    pago?: BoolFilter | boolean
    cancelado?: BoolFilter | boolean
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    documento?: XOR<DocumentoRelationFilter, DocumentoWhereInput>
    user?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    cliente?: XOR<ClienteRelationFilter, clienteWhereInput>
    Fin_pago?: Fin_pagoListRelationFilter
  }

  export type FinanceiroOrderByWithRelationInput = {
    fin_id?: SortOrder
    Cliente_id?: SortOrder
    documentoDoc_controle?: SortOrder
    usuarioId?: SortOrder
    dt_create?: SortOrder
    dt_vencimento?: SortOrder
    pago?: SortOrder
    cancelado?: SortOrder
    valor?: SortOrder
    documento?: DocumentoOrderByWithRelationInput
    user?: UsuarioOrderByWithRelationInput
    cliente?: clienteOrderByWithRelationInput
    Fin_pago?: Fin_pagoOrderByRelationAggregateInput
  }

  export type FinanceiroWhereUniqueInput = {
    fin_id?: number
  }

  export type FinanceiroOrderByWithAggregationInput = {
    fin_id?: SortOrder
    Cliente_id?: SortOrder
    documentoDoc_controle?: SortOrder
    usuarioId?: SortOrder
    dt_create?: SortOrder
    dt_vencimento?: SortOrder
    pago?: SortOrder
    cancelado?: SortOrder
    valor?: SortOrder
    _count?: FinanceiroCountOrderByAggregateInput
    _avg?: FinanceiroAvgOrderByAggregateInput
    _max?: FinanceiroMaxOrderByAggregateInput
    _min?: FinanceiroMinOrderByAggregateInput
    _sum?: FinanceiroSumOrderByAggregateInput
  }

  export type FinanceiroScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FinanceiroScalarWhereWithAggregatesInput>
    OR?: Enumerable<FinanceiroScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FinanceiroScalarWhereWithAggregatesInput>
    fin_id?: IntWithAggregatesFilter | number
    Cliente_id?: IntWithAggregatesFilter | number
    documentoDoc_controle?: IntWithAggregatesFilter | number
    usuarioId?: IntWithAggregatesFilter | number
    dt_create?: DateTimeWithAggregatesFilter | Date | string
    dt_vencimento?: DateTimeWithAggregatesFilter | Date | string
    pago?: BoolWithAggregatesFilter | boolean
    cancelado?: BoolWithAggregatesFilter | boolean
    valor?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type Fin_pagoWhereInput = {
    AND?: Enumerable<Fin_pagoWhereInput>
    OR?: Enumerable<Fin_pagoWhereInput>
    NOT?: Enumerable<Fin_pagoWhereInput>
    pago_id?: IntFilter | number
    Fin_id?: IntFilter | number
    usuarioId?: IntFilter | number
    dt_pago?: DateTimeFilter | Date | string
    val_desc?: DecimalFilter | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalFilter | Decimal | DecimalJsLike | number | string
    financeiro?: XOR<FinanceiroRelationFilter, FinanceiroWhereInput>
    user?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type Fin_pagoOrderByWithRelationInput = {
    pago_id?: SortOrder
    Fin_id?: SortOrder
    usuarioId?: SortOrder
    dt_pago?: SortOrder
    val_desc?: SortOrder
    val_juros?: SortOrder
    financeiro?: FinanceiroOrderByWithRelationInput
    user?: UsuarioOrderByWithRelationInput
  }

  export type Fin_pagoWhereUniqueInput = {
    pago_id?: number
  }

  export type Fin_pagoOrderByWithAggregationInput = {
    pago_id?: SortOrder
    Fin_id?: SortOrder
    usuarioId?: SortOrder
    dt_pago?: SortOrder
    val_desc?: SortOrder
    val_juros?: SortOrder
    _count?: Fin_pagoCountOrderByAggregateInput
    _avg?: Fin_pagoAvgOrderByAggregateInput
    _max?: Fin_pagoMaxOrderByAggregateInput
    _min?: Fin_pagoMinOrderByAggregateInput
    _sum?: Fin_pagoSumOrderByAggregateInput
  }

  export type Fin_pagoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Fin_pagoScalarWhereWithAggregatesInput>
    OR?: Enumerable<Fin_pagoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Fin_pagoScalarWhereWithAggregatesInput>
    pago_id?: IntWithAggregatesFilter | number
    Fin_id?: IntWithAggregatesFilter | number
    usuarioId?: IntWithAggregatesFilter | number
    dt_pago?: DateTimeWithAggregatesFilter | Date | string
    val_desc?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type MovimentacaoWhereInput = {
    AND?: Enumerable<MovimentacaoWhereInput>
    OR?: Enumerable<MovimentacaoWhereInput>
    NOT?: Enumerable<MovimentacaoWhereInput>
    mov_id?: IntFilter | number
    descricao?: StringFilter | string
    entrada?: BoolFilter | boolean
    saida?: BoolFilter | boolean
    quantidade?: IntFilter | number
  }

  export type MovimentacaoOrderByWithRelationInput = {
    mov_id?: SortOrder
    descricao?: SortOrder
    entrada?: SortOrder
    saida?: SortOrder
    quantidade?: SortOrder
  }

  export type MovimentacaoWhereUniqueInput = {
    mov_id?: number
  }

  export type MovimentacaoOrderByWithAggregationInput = {
    mov_id?: SortOrder
    descricao?: SortOrder
    entrada?: SortOrder
    saida?: SortOrder
    quantidade?: SortOrder
    _count?: MovimentacaoCountOrderByAggregateInput
    _avg?: MovimentacaoAvgOrderByAggregateInput
    _max?: MovimentacaoMaxOrderByAggregateInput
    _min?: MovimentacaoMinOrderByAggregateInput
    _sum?: MovimentacaoSumOrderByAggregateInput
  }

  export type MovimentacaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MovimentacaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<MovimentacaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MovimentacaoScalarWhereWithAggregatesInput>
    mov_id?: IntWithAggregatesFilter | number
    descricao?: StringWithAggregatesFilter | string
    entrada?: BoolWithAggregatesFilter | boolean
    saida?: BoolWithAggregatesFilter | boolean
    quantidade?: IntWithAggregatesFilter | number
  }

  export type UsuarioCreateInput = {
    nome: string
    senha: string
    Financeiro?: FinanceiroCreateNestedManyWithoutUserInput
    Fin_pago?: Fin_pagoCreateNestedManyWithoutUserInput
    Documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nome: string
    senha: string
    Financeiro?: FinanceiroUncheckedCreateNestedManyWithoutUserInput
    Fin_pago?: Fin_pagoUncheckedCreateNestedManyWithoutUserInput
    Documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Financeiro?: FinanceiroUpdateManyWithoutUserNestedInput
    Fin_pago?: Fin_pagoUpdateManyWithoutUserNestedInput
    Documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Financeiro?: FinanceiroUncheckedUpdateManyWithoutUserNestedInput
    Fin_pago?: Fin_pagoUncheckedUpdateManyWithoutUserNestedInput
    Documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type ContaCreateInput = {
    id_conta: number
    nome: string
    Saldo: Decimal | DecimalJsLike | number | string
    Documento?: DocumentoCreateNestedManyWithoutContaInput
  }

  export type ContaUncheckedCreateInput = {
    id_conta: number
    nome: string
    Saldo: Decimal | DecimalJsLike | number | string
    Documento?: DocumentoUncheckedCreateNestedManyWithoutContaInput
  }

  export type ContaUpdateInput = {
    id_conta?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    Saldo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Documento?: DocumentoUpdateManyWithoutContaNestedInput
  }

  export type ContaUncheckedUpdateInput = {
    id_conta?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    Saldo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Documento?: DocumentoUncheckedUpdateManyWithoutContaNestedInput
  }

  export type ContaUpdateManyMutationInput = {
    id_conta?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    Saldo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ContaUncheckedUpdateManyInput = {
    id_conta?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    Saldo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ProdutoCreateInput = {
    id_produto: number
    cod_barras: string
    descricao: string
    valor_v: Decimal | DecimalJsLike | number | string
    valor_c: Decimal | DecimalJsLike | number | string
    estoque: number
  }

  export type ProdutoUncheckedCreateInput = {
    id_produto: number
    cod_barras: string
    descricao: string
    valor_v: Decimal | DecimalJsLike | number | string
    valor_c: Decimal | DecimalJsLike | number | string
    estoque: number
  }

  export type ProdutoUpdateInput = {
    id_produto?: IntFieldUpdateOperationsInput | number
    cod_barras?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor_v?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valor_c?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    estoque?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoUncheckedUpdateInput = {
    id_produto?: IntFieldUpdateOperationsInput | number
    cod_barras?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor_v?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valor_c?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    estoque?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoUpdateManyMutationInput = {
    id_produto?: IntFieldUpdateOperationsInput | number
    cod_barras?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor_v?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valor_c?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    estoque?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoUncheckedUpdateManyInput = {
    id_produto?: IntFieldUpdateOperationsInput | number
    cod_barras?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor_v?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valor_c?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    estoque?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentoCreateInput = {
    doc_controle: number
    id_cliente: number
    valor: Decimal | DecimalJsLike | number | string
    Financeiro?: FinanceiroCreateNestedManyWithoutDocumentoInput
    user: UsuarioCreateNestedOneWithoutDocumentoInput
    conta: ContaCreateNestedOneWithoutDocumentoInput
  }

  export type DocumentoUncheckedCreateInput = {
    doc_controle: number
    usuarioId: number
    id_cliente: number
    valor: Decimal | DecimalJsLike | number | string
    contaId_conta: number
    Financeiro?: FinanceiroUncheckedCreateNestedManyWithoutDocumentoInput
  }

  export type DocumentoUpdateInput = {
    doc_controle?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Financeiro?: FinanceiroUpdateManyWithoutDocumentoNestedInput
    user?: UsuarioUpdateOneRequiredWithoutDocumentoNestedInput
    conta?: ContaUpdateOneRequiredWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateInput = {
    doc_controle?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    contaId_conta?: IntFieldUpdateOperationsInput | number
    Financeiro?: FinanceiroUncheckedUpdateManyWithoutDocumentoNestedInput
  }

  export type DocumentoUpdateManyMutationInput = {
    doc_controle?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type DocumentoUncheckedUpdateManyInput = {
    doc_controle?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    contaId_conta?: IntFieldUpdateOperationsInput | number
  }

  export type clienteCreateInput = {
    cpfCnpj: string
    email: string
    nome: string
    telefone: string
    endereco: string
    numero: number
    Financeiro?: FinanceiroCreateNestedManyWithoutClienteInput
  }

  export type clienteUncheckedCreateInput = {
    cliente_id?: number
    cpfCnpj: string
    email: string
    nome: string
    telefone: string
    endereco: string
    numero: number
    Financeiro?: FinanceiroUncheckedCreateNestedManyWithoutClienteInput
  }

  export type clienteUpdateInput = {
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    Financeiro?: FinanceiroUpdateManyWithoutClienteNestedInput
  }

  export type clienteUncheckedUpdateInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    Financeiro?: FinanceiroUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type clienteUpdateManyMutationInput = {
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
  }

  export type clienteUncheckedUpdateManyInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
  }

  export type FinanceiroCreateInput = {
    dt_create?: Date | string
    dt_vencimento: Date | string
    pago?: boolean
    cancelado?: boolean
    valor: Decimal | DecimalJsLike | number | string
    documento: DocumentoCreateNestedOneWithoutFinanceiroInput
    user: UsuarioCreateNestedOneWithoutFinanceiroInput
    cliente: clienteCreateNestedOneWithoutFinanceiroInput
    Fin_pago?: Fin_pagoCreateNestedManyWithoutFinanceiroInput
  }

  export type FinanceiroUncheckedCreateInput = {
    fin_id?: number
    Cliente_id: number
    documentoDoc_controle: number
    usuarioId: number
    dt_create?: Date | string
    dt_vencimento: Date | string
    pago?: boolean
    cancelado?: boolean
    valor: Decimal | DecimalJsLike | number | string
    Fin_pago?: Fin_pagoUncheckedCreateNestedManyWithoutFinanceiroInput
  }

  export type FinanceiroUpdateInput = {
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    documento?: DocumentoUpdateOneRequiredWithoutFinanceiroNestedInput
    user?: UsuarioUpdateOneRequiredWithoutFinanceiroNestedInput
    cliente?: clienteUpdateOneRequiredWithoutFinanceiroNestedInput
    Fin_pago?: Fin_pagoUpdateManyWithoutFinanceiroNestedInput
  }

  export type FinanceiroUncheckedUpdateInput = {
    fin_id?: IntFieldUpdateOperationsInput | number
    Cliente_id?: IntFieldUpdateOperationsInput | number
    documentoDoc_controle?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fin_pago?: Fin_pagoUncheckedUpdateManyWithoutFinanceiroNestedInput
  }

  export type FinanceiroUpdateManyMutationInput = {
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type FinanceiroUncheckedUpdateManyInput = {
    fin_id?: IntFieldUpdateOperationsInput | number
    Cliente_id?: IntFieldUpdateOperationsInput | number
    documentoDoc_controle?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type Fin_pagoCreateInput = {
    dt_pago?: Date | string
    val_desc: Decimal | DecimalJsLike | number | string
    val_juros: Decimal | DecimalJsLike | number | string
    financeiro: FinanceiroCreateNestedOneWithoutFin_pagoInput
    user: UsuarioCreateNestedOneWithoutFin_pagoInput
  }

  export type Fin_pagoUncheckedCreateInput = {
    pago_id?: number
    Fin_id: number
    usuarioId: number
    dt_pago?: Date | string
    val_desc: Decimal | DecimalJsLike | number | string
    val_juros: Decimal | DecimalJsLike | number | string
  }

  export type Fin_pagoUpdateInput = {
    dt_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    val_desc?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    financeiro?: FinanceiroUpdateOneRequiredWithoutFin_pagoNestedInput
    user?: UsuarioUpdateOneRequiredWithoutFin_pagoNestedInput
  }

  export type Fin_pagoUncheckedUpdateInput = {
    pago_id?: IntFieldUpdateOperationsInput | number
    Fin_id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    dt_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    val_desc?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type Fin_pagoUpdateManyMutationInput = {
    dt_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    val_desc?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type Fin_pagoUncheckedUpdateManyInput = {
    pago_id?: IntFieldUpdateOperationsInput | number
    Fin_id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    dt_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    val_desc?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MovimentacaoCreateInput = {
    descricao: string
    entrada: boolean
    saida: boolean
    quantidade: number
  }

  export type MovimentacaoUncheckedCreateInput = {
    mov_id?: number
    descricao: string
    entrada: boolean
    saida: boolean
    quantidade: number
  }

  export type MovimentacaoUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    entrada?: BoolFieldUpdateOperationsInput | boolean
    saida?: BoolFieldUpdateOperationsInput | boolean
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type MovimentacaoUncheckedUpdateInput = {
    mov_id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    entrada?: BoolFieldUpdateOperationsInput | boolean
    saida?: BoolFieldUpdateOperationsInput | boolean
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type MovimentacaoUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    entrada?: BoolFieldUpdateOperationsInput | boolean
    saida?: BoolFieldUpdateOperationsInput | boolean
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type MovimentacaoUncheckedUpdateManyInput = {
    mov_id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    entrada?: BoolFieldUpdateOperationsInput | boolean
    saida?: BoolFieldUpdateOperationsInput | boolean
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type FinanceiroListRelationFilter = {
    every?: FinanceiroWhereInput
    some?: FinanceiroWhereInput
    none?: FinanceiroWhereInput
  }

  export type Fin_pagoListRelationFilter = {
    every?: Fin_pagoWhereInput
    some?: Fin_pagoWhereInput
    none?: Fin_pagoWhereInput
  }

  export type DocumentoListRelationFilter = {
    every?: DocumentoWhereInput
    some?: DocumentoWhereInput
    none?: DocumentoWhereInput
  }

  export type FinanceiroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Fin_pagoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type ContaCountOrderByAggregateInput = {
    id_conta?: SortOrder
    nome?: SortOrder
    Saldo?: SortOrder
  }

  export type ContaAvgOrderByAggregateInput = {
    id_conta?: SortOrder
    Saldo?: SortOrder
  }

  export type ContaMaxOrderByAggregateInput = {
    id_conta?: SortOrder
    nome?: SortOrder
    Saldo?: SortOrder
  }

  export type ContaMinOrderByAggregateInput = {
    id_conta?: SortOrder
    nome?: SortOrder
    Saldo?: SortOrder
  }

  export type ContaSumOrderByAggregateInput = {
    id_conta?: SortOrder
    Saldo?: SortOrder
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type ProdutoCountOrderByAggregateInput = {
    id_produto?: SortOrder
    cod_barras?: SortOrder
    descricao?: SortOrder
    valor_v?: SortOrder
    valor_c?: SortOrder
    estoque?: SortOrder
  }

  export type ProdutoAvgOrderByAggregateInput = {
    id_produto?: SortOrder
    valor_v?: SortOrder
    valor_c?: SortOrder
    estoque?: SortOrder
  }

  export type ProdutoMaxOrderByAggregateInput = {
    id_produto?: SortOrder
    cod_barras?: SortOrder
    descricao?: SortOrder
    valor_v?: SortOrder
    valor_c?: SortOrder
    estoque?: SortOrder
  }

  export type ProdutoMinOrderByAggregateInput = {
    id_produto?: SortOrder
    cod_barras?: SortOrder
    descricao?: SortOrder
    valor_v?: SortOrder
    valor_c?: SortOrder
    estoque?: SortOrder
  }

  export type ProdutoSumOrderByAggregateInput = {
    id_produto?: SortOrder
    valor_v?: SortOrder
    valor_c?: SortOrder
    estoque?: SortOrder
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type ContaRelationFilter = {
    is?: ContaWhereInput
    isNot?: ContaWhereInput
  }

  export type DocumentoCountOrderByAggregateInput = {
    doc_controle?: SortOrder
    usuarioId?: SortOrder
    id_cliente?: SortOrder
    valor?: SortOrder
    contaId_conta?: SortOrder
  }

  export type DocumentoAvgOrderByAggregateInput = {
    doc_controle?: SortOrder
    usuarioId?: SortOrder
    id_cliente?: SortOrder
    valor?: SortOrder
    contaId_conta?: SortOrder
  }

  export type DocumentoMaxOrderByAggregateInput = {
    doc_controle?: SortOrder
    usuarioId?: SortOrder
    id_cliente?: SortOrder
    valor?: SortOrder
    contaId_conta?: SortOrder
  }

  export type DocumentoMinOrderByAggregateInput = {
    doc_controle?: SortOrder
    usuarioId?: SortOrder
    id_cliente?: SortOrder
    valor?: SortOrder
    contaId_conta?: SortOrder
  }

  export type DocumentoSumOrderByAggregateInput = {
    doc_controle?: SortOrder
    usuarioId?: SortOrder
    id_cliente?: SortOrder
    valor?: SortOrder
    contaId_conta?: SortOrder
  }

  export type clienteCountOrderByAggregateInput = {
    cliente_id?: SortOrder
    cpfCnpj?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
  }

  export type clienteAvgOrderByAggregateInput = {
    cliente_id?: SortOrder
    numero?: SortOrder
  }

  export type clienteMaxOrderByAggregateInput = {
    cliente_id?: SortOrder
    cpfCnpj?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
  }

  export type clienteMinOrderByAggregateInput = {
    cliente_id?: SortOrder
    cpfCnpj?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
  }

  export type clienteSumOrderByAggregateInput = {
    cliente_id?: SortOrder
    numero?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DocumentoRelationFilter = {
    is?: DocumentoWhereInput
    isNot?: DocumentoWhereInput
  }

  export type ClienteRelationFilter = {
    is?: clienteWhereInput
    isNot?: clienteWhereInput
  }

  export type FinanceiroCountOrderByAggregateInput = {
    fin_id?: SortOrder
    Cliente_id?: SortOrder
    documentoDoc_controle?: SortOrder
    usuarioId?: SortOrder
    dt_create?: SortOrder
    dt_vencimento?: SortOrder
    pago?: SortOrder
    cancelado?: SortOrder
    valor?: SortOrder
  }

  export type FinanceiroAvgOrderByAggregateInput = {
    fin_id?: SortOrder
    Cliente_id?: SortOrder
    documentoDoc_controle?: SortOrder
    usuarioId?: SortOrder
    valor?: SortOrder
  }

  export type FinanceiroMaxOrderByAggregateInput = {
    fin_id?: SortOrder
    Cliente_id?: SortOrder
    documentoDoc_controle?: SortOrder
    usuarioId?: SortOrder
    dt_create?: SortOrder
    dt_vencimento?: SortOrder
    pago?: SortOrder
    cancelado?: SortOrder
    valor?: SortOrder
  }

  export type FinanceiroMinOrderByAggregateInput = {
    fin_id?: SortOrder
    Cliente_id?: SortOrder
    documentoDoc_controle?: SortOrder
    usuarioId?: SortOrder
    dt_create?: SortOrder
    dt_vencimento?: SortOrder
    pago?: SortOrder
    cancelado?: SortOrder
    valor?: SortOrder
  }

  export type FinanceiroSumOrderByAggregateInput = {
    fin_id?: SortOrder
    Cliente_id?: SortOrder
    documentoDoc_controle?: SortOrder
    usuarioId?: SortOrder
    valor?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type FinanceiroRelationFilter = {
    is?: FinanceiroWhereInput
    isNot?: FinanceiroWhereInput
  }

  export type Fin_pagoCountOrderByAggregateInput = {
    pago_id?: SortOrder
    Fin_id?: SortOrder
    usuarioId?: SortOrder
    dt_pago?: SortOrder
    val_desc?: SortOrder
    val_juros?: SortOrder
  }

  export type Fin_pagoAvgOrderByAggregateInput = {
    pago_id?: SortOrder
    Fin_id?: SortOrder
    usuarioId?: SortOrder
    val_desc?: SortOrder
    val_juros?: SortOrder
  }

  export type Fin_pagoMaxOrderByAggregateInput = {
    pago_id?: SortOrder
    Fin_id?: SortOrder
    usuarioId?: SortOrder
    dt_pago?: SortOrder
    val_desc?: SortOrder
    val_juros?: SortOrder
  }

  export type Fin_pagoMinOrderByAggregateInput = {
    pago_id?: SortOrder
    Fin_id?: SortOrder
    usuarioId?: SortOrder
    dt_pago?: SortOrder
    val_desc?: SortOrder
    val_juros?: SortOrder
  }

  export type Fin_pagoSumOrderByAggregateInput = {
    pago_id?: SortOrder
    Fin_id?: SortOrder
    usuarioId?: SortOrder
    val_desc?: SortOrder
    val_juros?: SortOrder
  }

  export type MovimentacaoCountOrderByAggregateInput = {
    mov_id?: SortOrder
    descricao?: SortOrder
    entrada?: SortOrder
    saida?: SortOrder
    quantidade?: SortOrder
  }

  export type MovimentacaoAvgOrderByAggregateInput = {
    mov_id?: SortOrder
    quantidade?: SortOrder
  }

  export type MovimentacaoMaxOrderByAggregateInput = {
    mov_id?: SortOrder
    descricao?: SortOrder
    entrada?: SortOrder
    saida?: SortOrder
    quantidade?: SortOrder
  }

  export type MovimentacaoMinOrderByAggregateInput = {
    mov_id?: SortOrder
    descricao?: SortOrder
    entrada?: SortOrder
    saida?: SortOrder
    quantidade?: SortOrder
  }

  export type MovimentacaoSumOrderByAggregateInput = {
    mov_id?: SortOrder
    quantidade?: SortOrder
  }

  export type FinanceiroCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutUserInput>, Enumerable<FinanceiroUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutUserInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
  }

  export type Fin_pagoCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Fin_pagoCreateWithoutUserInput>, Enumerable<Fin_pagoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Fin_pagoCreateOrConnectWithoutUserInput>
    connect?: Enumerable<Fin_pagoWhereUniqueInput>
  }

  export type DocumentoCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutUserInput>, Enumerable<DocumentoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutUserInput>
    connect?: Enumerable<DocumentoWhereUniqueInput>
  }

  export type FinanceiroUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutUserInput>, Enumerable<FinanceiroUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutUserInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
  }

  export type Fin_pagoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Fin_pagoCreateWithoutUserInput>, Enumerable<Fin_pagoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Fin_pagoCreateOrConnectWithoutUserInput>
    connect?: Enumerable<Fin_pagoWhereUniqueInput>
  }

  export type DocumentoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutUserInput>, Enumerable<DocumentoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutUserInput>
    connect?: Enumerable<DocumentoWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FinanceiroUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutUserInput>, Enumerable<FinanceiroUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FinanceiroUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<FinanceiroWhereUniqueInput>
    disconnect?: Enumerable<FinanceiroWhereUniqueInput>
    delete?: Enumerable<FinanceiroWhereUniqueInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
    update?: Enumerable<FinanceiroUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FinanceiroUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FinanceiroScalarWhereInput>
  }

  export type Fin_pagoUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Fin_pagoCreateWithoutUserInput>, Enumerable<Fin_pagoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Fin_pagoCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Fin_pagoUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<Fin_pagoWhereUniqueInput>
    disconnect?: Enumerable<Fin_pagoWhereUniqueInput>
    delete?: Enumerable<Fin_pagoWhereUniqueInput>
    connect?: Enumerable<Fin_pagoWhereUniqueInput>
    update?: Enumerable<Fin_pagoUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Fin_pagoUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Fin_pagoScalarWhereInput>
  }

  export type DocumentoUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutUserInput>, Enumerable<DocumentoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DocumentoUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<DocumentoWhereUniqueInput>
    disconnect?: Enumerable<DocumentoWhereUniqueInput>
    delete?: Enumerable<DocumentoWhereUniqueInput>
    connect?: Enumerable<DocumentoWhereUniqueInput>
    update?: Enumerable<DocumentoUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DocumentoUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DocumentoScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FinanceiroUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutUserInput>, Enumerable<FinanceiroUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FinanceiroUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<FinanceiroWhereUniqueInput>
    disconnect?: Enumerable<FinanceiroWhereUniqueInput>
    delete?: Enumerable<FinanceiroWhereUniqueInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
    update?: Enumerable<FinanceiroUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FinanceiroUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FinanceiroScalarWhereInput>
  }

  export type Fin_pagoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Fin_pagoCreateWithoutUserInput>, Enumerable<Fin_pagoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Fin_pagoCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Fin_pagoUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<Fin_pagoWhereUniqueInput>
    disconnect?: Enumerable<Fin_pagoWhereUniqueInput>
    delete?: Enumerable<Fin_pagoWhereUniqueInput>
    connect?: Enumerable<Fin_pagoWhereUniqueInput>
    update?: Enumerable<Fin_pagoUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Fin_pagoUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Fin_pagoScalarWhereInput>
  }

  export type DocumentoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutUserInput>, Enumerable<DocumentoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DocumentoUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<DocumentoWhereUniqueInput>
    disconnect?: Enumerable<DocumentoWhereUniqueInput>
    delete?: Enumerable<DocumentoWhereUniqueInput>
    connect?: Enumerable<DocumentoWhereUniqueInput>
    update?: Enumerable<DocumentoUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DocumentoUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DocumentoScalarWhereInput>
  }

  export type DocumentoCreateNestedManyWithoutContaInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutContaInput>, Enumerable<DocumentoUncheckedCreateWithoutContaInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutContaInput>
    connect?: Enumerable<DocumentoWhereUniqueInput>
  }

  export type DocumentoUncheckedCreateNestedManyWithoutContaInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutContaInput>, Enumerable<DocumentoUncheckedCreateWithoutContaInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutContaInput>
    connect?: Enumerable<DocumentoWhereUniqueInput>
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type DocumentoUpdateManyWithoutContaNestedInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutContaInput>, Enumerable<DocumentoUncheckedCreateWithoutContaInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutContaInput>
    upsert?: Enumerable<DocumentoUpsertWithWhereUniqueWithoutContaInput>
    set?: Enumerable<DocumentoWhereUniqueInput>
    disconnect?: Enumerable<DocumentoWhereUniqueInput>
    delete?: Enumerable<DocumentoWhereUniqueInput>
    connect?: Enumerable<DocumentoWhereUniqueInput>
    update?: Enumerable<DocumentoUpdateWithWhereUniqueWithoutContaInput>
    updateMany?: Enumerable<DocumentoUpdateManyWithWhereWithoutContaInput>
    deleteMany?: Enumerable<DocumentoScalarWhereInput>
  }

  export type DocumentoUncheckedUpdateManyWithoutContaNestedInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutContaInput>, Enumerable<DocumentoUncheckedCreateWithoutContaInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutContaInput>
    upsert?: Enumerable<DocumentoUpsertWithWhereUniqueWithoutContaInput>
    set?: Enumerable<DocumentoWhereUniqueInput>
    disconnect?: Enumerable<DocumentoWhereUniqueInput>
    delete?: Enumerable<DocumentoWhereUniqueInput>
    connect?: Enumerable<DocumentoWhereUniqueInput>
    update?: Enumerable<DocumentoUpdateWithWhereUniqueWithoutContaInput>
    updateMany?: Enumerable<DocumentoUpdateManyWithWhereWithoutContaInput>
    deleteMany?: Enumerable<DocumentoScalarWhereInput>
  }

  export type FinanceiroCreateNestedManyWithoutDocumentoInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutDocumentoInput>, Enumerable<FinanceiroUncheckedCreateWithoutDocumentoInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutDocumentoInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
  }

  export type UsuarioCreateNestedOneWithoutDocumentoInput = {
    create?: XOR<UsuarioCreateWithoutDocumentoInput, UsuarioUncheckedCreateWithoutDocumentoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDocumentoInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ContaCreateNestedOneWithoutDocumentoInput = {
    create?: XOR<ContaCreateWithoutDocumentoInput, ContaUncheckedCreateWithoutDocumentoInput>
    connectOrCreate?: ContaCreateOrConnectWithoutDocumentoInput
    connect?: ContaWhereUniqueInput
  }

  export type FinanceiroUncheckedCreateNestedManyWithoutDocumentoInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutDocumentoInput>, Enumerable<FinanceiroUncheckedCreateWithoutDocumentoInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutDocumentoInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
  }

  export type FinanceiroUpdateManyWithoutDocumentoNestedInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutDocumentoInput>, Enumerable<FinanceiroUncheckedCreateWithoutDocumentoInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutDocumentoInput>
    upsert?: Enumerable<FinanceiroUpsertWithWhereUniqueWithoutDocumentoInput>
    set?: Enumerable<FinanceiroWhereUniqueInput>
    disconnect?: Enumerable<FinanceiroWhereUniqueInput>
    delete?: Enumerable<FinanceiroWhereUniqueInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
    update?: Enumerable<FinanceiroUpdateWithWhereUniqueWithoutDocumentoInput>
    updateMany?: Enumerable<FinanceiroUpdateManyWithWhereWithoutDocumentoInput>
    deleteMany?: Enumerable<FinanceiroScalarWhereInput>
  }

  export type UsuarioUpdateOneRequiredWithoutDocumentoNestedInput = {
    create?: XOR<UsuarioCreateWithoutDocumentoInput, UsuarioUncheckedCreateWithoutDocumentoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDocumentoInput
    upsert?: UsuarioUpsertWithoutDocumentoInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutDocumentoInput, UsuarioUncheckedUpdateWithoutDocumentoInput>
  }

  export type ContaUpdateOneRequiredWithoutDocumentoNestedInput = {
    create?: XOR<ContaCreateWithoutDocumentoInput, ContaUncheckedCreateWithoutDocumentoInput>
    connectOrCreate?: ContaCreateOrConnectWithoutDocumentoInput
    upsert?: ContaUpsertWithoutDocumentoInput
    connect?: ContaWhereUniqueInput
    update?: XOR<ContaUpdateWithoutDocumentoInput, ContaUncheckedUpdateWithoutDocumentoInput>
  }

  export type FinanceiroUncheckedUpdateManyWithoutDocumentoNestedInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutDocumentoInput>, Enumerable<FinanceiroUncheckedCreateWithoutDocumentoInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutDocumentoInput>
    upsert?: Enumerable<FinanceiroUpsertWithWhereUniqueWithoutDocumentoInput>
    set?: Enumerable<FinanceiroWhereUniqueInput>
    disconnect?: Enumerable<FinanceiroWhereUniqueInput>
    delete?: Enumerable<FinanceiroWhereUniqueInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
    update?: Enumerable<FinanceiroUpdateWithWhereUniqueWithoutDocumentoInput>
    updateMany?: Enumerable<FinanceiroUpdateManyWithWhereWithoutDocumentoInput>
    deleteMany?: Enumerable<FinanceiroScalarWhereInput>
  }

  export type FinanceiroCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutClienteInput>, Enumerable<FinanceiroUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutClienteInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
  }

  export type FinanceiroUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutClienteInput>, Enumerable<FinanceiroUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutClienteInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
  }

  export type FinanceiroUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutClienteInput>, Enumerable<FinanceiroUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<FinanceiroUpsertWithWhereUniqueWithoutClienteInput>
    set?: Enumerable<FinanceiroWhereUniqueInput>
    disconnect?: Enumerable<FinanceiroWhereUniqueInput>
    delete?: Enumerable<FinanceiroWhereUniqueInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
    update?: Enumerable<FinanceiroUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<FinanceiroUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<FinanceiroScalarWhereInput>
  }

  export type FinanceiroUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<FinanceiroCreateWithoutClienteInput>, Enumerable<FinanceiroUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<FinanceiroCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<FinanceiroUpsertWithWhereUniqueWithoutClienteInput>
    set?: Enumerable<FinanceiroWhereUniqueInput>
    disconnect?: Enumerable<FinanceiroWhereUniqueInput>
    delete?: Enumerable<FinanceiroWhereUniqueInput>
    connect?: Enumerable<FinanceiroWhereUniqueInput>
    update?: Enumerable<FinanceiroUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<FinanceiroUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<FinanceiroScalarWhereInput>
  }

  export type DocumentoCreateNestedOneWithoutFinanceiroInput = {
    create?: XOR<DocumentoCreateWithoutFinanceiroInput, DocumentoUncheckedCreateWithoutFinanceiroInput>
    connectOrCreate?: DocumentoCreateOrConnectWithoutFinanceiroInput
    connect?: DocumentoWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutFinanceiroInput = {
    create?: XOR<UsuarioCreateWithoutFinanceiroInput, UsuarioUncheckedCreateWithoutFinanceiroInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutFinanceiroInput
    connect?: UsuarioWhereUniqueInput
  }

  export type clienteCreateNestedOneWithoutFinanceiroInput = {
    create?: XOR<clienteCreateWithoutFinanceiroInput, clienteUncheckedCreateWithoutFinanceiroInput>
    connectOrCreate?: clienteCreateOrConnectWithoutFinanceiroInput
    connect?: clienteWhereUniqueInput
  }

  export type Fin_pagoCreateNestedManyWithoutFinanceiroInput = {
    create?: XOR<Enumerable<Fin_pagoCreateWithoutFinanceiroInput>, Enumerable<Fin_pagoUncheckedCreateWithoutFinanceiroInput>>
    connectOrCreate?: Enumerable<Fin_pagoCreateOrConnectWithoutFinanceiroInput>
    connect?: Enumerable<Fin_pagoWhereUniqueInput>
  }

  export type Fin_pagoUncheckedCreateNestedManyWithoutFinanceiroInput = {
    create?: XOR<Enumerable<Fin_pagoCreateWithoutFinanceiroInput>, Enumerable<Fin_pagoUncheckedCreateWithoutFinanceiroInput>>
    connectOrCreate?: Enumerable<Fin_pagoCreateOrConnectWithoutFinanceiroInput>
    connect?: Enumerable<Fin_pagoWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DocumentoUpdateOneRequiredWithoutFinanceiroNestedInput = {
    create?: XOR<DocumentoCreateWithoutFinanceiroInput, DocumentoUncheckedCreateWithoutFinanceiroInput>
    connectOrCreate?: DocumentoCreateOrConnectWithoutFinanceiroInput
    upsert?: DocumentoUpsertWithoutFinanceiroInput
    connect?: DocumentoWhereUniqueInput
    update?: XOR<DocumentoUpdateWithoutFinanceiroInput, DocumentoUncheckedUpdateWithoutFinanceiroInput>
  }

  export type UsuarioUpdateOneRequiredWithoutFinanceiroNestedInput = {
    create?: XOR<UsuarioCreateWithoutFinanceiroInput, UsuarioUncheckedCreateWithoutFinanceiroInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutFinanceiroInput
    upsert?: UsuarioUpsertWithoutFinanceiroInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutFinanceiroInput, UsuarioUncheckedUpdateWithoutFinanceiroInput>
  }

  export type clienteUpdateOneRequiredWithoutFinanceiroNestedInput = {
    create?: XOR<clienteCreateWithoutFinanceiroInput, clienteUncheckedCreateWithoutFinanceiroInput>
    connectOrCreate?: clienteCreateOrConnectWithoutFinanceiroInput
    upsert?: clienteUpsertWithoutFinanceiroInput
    connect?: clienteWhereUniqueInput
    update?: XOR<clienteUpdateWithoutFinanceiroInput, clienteUncheckedUpdateWithoutFinanceiroInput>
  }

  export type Fin_pagoUpdateManyWithoutFinanceiroNestedInput = {
    create?: XOR<Enumerable<Fin_pagoCreateWithoutFinanceiroInput>, Enumerable<Fin_pagoUncheckedCreateWithoutFinanceiroInput>>
    connectOrCreate?: Enumerable<Fin_pagoCreateOrConnectWithoutFinanceiroInput>
    upsert?: Enumerable<Fin_pagoUpsertWithWhereUniqueWithoutFinanceiroInput>
    set?: Enumerable<Fin_pagoWhereUniqueInput>
    disconnect?: Enumerable<Fin_pagoWhereUniqueInput>
    delete?: Enumerable<Fin_pagoWhereUniqueInput>
    connect?: Enumerable<Fin_pagoWhereUniqueInput>
    update?: Enumerable<Fin_pagoUpdateWithWhereUniqueWithoutFinanceiroInput>
    updateMany?: Enumerable<Fin_pagoUpdateManyWithWhereWithoutFinanceiroInput>
    deleteMany?: Enumerable<Fin_pagoScalarWhereInput>
  }

  export type Fin_pagoUncheckedUpdateManyWithoutFinanceiroNestedInput = {
    create?: XOR<Enumerable<Fin_pagoCreateWithoutFinanceiroInput>, Enumerable<Fin_pagoUncheckedCreateWithoutFinanceiroInput>>
    connectOrCreate?: Enumerable<Fin_pagoCreateOrConnectWithoutFinanceiroInput>
    upsert?: Enumerable<Fin_pagoUpsertWithWhereUniqueWithoutFinanceiroInput>
    set?: Enumerable<Fin_pagoWhereUniqueInput>
    disconnect?: Enumerable<Fin_pagoWhereUniqueInput>
    delete?: Enumerable<Fin_pagoWhereUniqueInput>
    connect?: Enumerable<Fin_pagoWhereUniqueInput>
    update?: Enumerable<Fin_pagoUpdateWithWhereUniqueWithoutFinanceiroInput>
    updateMany?: Enumerable<Fin_pagoUpdateManyWithWhereWithoutFinanceiroInput>
    deleteMany?: Enumerable<Fin_pagoScalarWhereInput>
  }

  export type FinanceiroCreateNestedOneWithoutFin_pagoInput = {
    create?: XOR<FinanceiroCreateWithoutFin_pagoInput, FinanceiroUncheckedCreateWithoutFin_pagoInput>
    connectOrCreate?: FinanceiroCreateOrConnectWithoutFin_pagoInput
    connect?: FinanceiroWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutFin_pagoInput = {
    create?: XOR<UsuarioCreateWithoutFin_pagoInput, UsuarioUncheckedCreateWithoutFin_pagoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutFin_pagoInput
    connect?: UsuarioWhereUniqueInput
  }

  export type FinanceiroUpdateOneRequiredWithoutFin_pagoNestedInput = {
    create?: XOR<FinanceiroCreateWithoutFin_pagoInput, FinanceiroUncheckedCreateWithoutFin_pagoInput>
    connectOrCreate?: FinanceiroCreateOrConnectWithoutFin_pagoInput
    upsert?: FinanceiroUpsertWithoutFin_pagoInput
    connect?: FinanceiroWhereUniqueInput
    update?: XOR<FinanceiroUpdateWithoutFin_pagoInput, FinanceiroUncheckedUpdateWithoutFin_pagoInput>
  }

  export type UsuarioUpdateOneRequiredWithoutFin_pagoNestedInput = {
    create?: XOR<UsuarioCreateWithoutFin_pagoInput, UsuarioUncheckedCreateWithoutFin_pagoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutFin_pagoInput
    upsert?: UsuarioUpsertWithoutFin_pagoInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutFin_pagoInput, UsuarioUncheckedUpdateWithoutFin_pagoInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type FinanceiroCreateWithoutUserInput = {
    dt_create?: Date | string
    dt_vencimento: Date | string
    pago?: boolean
    cancelado?: boolean
    valor: Decimal | DecimalJsLike | number | string
    documento: DocumentoCreateNestedOneWithoutFinanceiroInput
    cliente: clienteCreateNestedOneWithoutFinanceiroInput
    Fin_pago?: Fin_pagoCreateNestedManyWithoutFinanceiroInput
  }

  export type FinanceiroUncheckedCreateWithoutUserInput = {
    fin_id?: number
    Cliente_id: number
    documentoDoc_controle: number
    dt_create?: Date | string
    dt_vencimento: Date | string
    pago?: boolean
    cancelado?: boolean
    valor: Decimal | DecimalJsLike | number | string
    Fin_pago?: Fin_pagoUncheckedCreateNestedManyWithoutFinanceiroInput
  }

  export type FinanceiroCreateOrConnectWithoutUserInput = {
    where: FinanceiroWhereUniqueInput
    create: XOR<FinanceiroCreateWithoutUserInput, FinanceiroUncheckedCreateWithoutUserInput>
  }

  export type Fin_pagoCreateWithoutUserInput = {
    dt_pago?: Date | string
    val_desc: Decimal | DecimalJsLike | number | string
    val_juros: Decimal | DecimalJsLike | number | string
    financeiro: FinanceiroCreateNestedOneWithoutFin_pagoInput
  }

  export type Fin_pagoUncheckedCreateWithoutUserInput = {
    pago_id?: number
    Fin_id: number
    dt_pago?: Date | string
    val_desc: Decimal | DecimalJsLike | number | string
    val_juros: Decimal | DecimalJsLike | number | string
  }

  export type Fin_pagoCreateOrConnectWithoutUserInput = {
    where: Fin_pagoWhereUniqueInput
    create: XOR<Fin_pagoCreateWithoutUserInput, Fin_pagoUncheckedCreateWithoutUserInput>
  }

  export type DocumentoCreateWithoutUserInput = {
    doc_controle: number
    id_cliente: number
    valor: Decimal | DecimalJsLike | number | string
    Financeiro?: FinanceiroCreateNestedManyWithoutDocumentoInput
    conta: ContaCreateNestedOneWithoutDocumentoInput
  }

  export type DocumentoUncheckedCreateWithoutUserInput = {
    doc_controle: number
    id_cliente: number
    valor: Decimal | DecimalJsLike | number | string
    contaId_conta: number
    Financeiro?: FinanceiroUncheckedCreateNestedManyWithoutDocumentoInput
  }

  export type DocumentoCreateOrConnectWithoutUserInput = {
    where: DocumentoWhereUniqueInput
    create: XOR<DocumentoCreateWithoutUserInput, DocumentoUncheckedCreateWithoutUserInput>
  }

  export type FinanceiroUpsertWithWhereUniqueWithoutUserInput = {
    where: FinanceiroWhereUniqueInput
    update: XOR<FinanceiroUpdateWithoutUserInput, FinanceiroUncheckedUpdateWithoutUserInput>
    create: XOR<FinanceiroCreateWithoutUserInput, FinanceiroUncheckedCreateWithoutUserInput>
  }

  export type FinanceiroUpdateWithWhereUniqueWithoutUserInput = {
    where: FinanceiroWhereUniqueInput
    data: XOR<FinanceiroUpdateWithoutUserInput, FinanceiroUncheckedUpdateWithoutUserInput>
  }

  export type FinanceiroUpdateManyWithWhereWithoutUserInput = {
    where: FinanceiroScalarWhereInput
    data: XOR<FinanceiroUpdateManyMutationInput, FinanceiroUncheckedUpdateManyWithoutFinanceiroInput>
  }

  export type FinanceiroScalarWhereInput = {
    AND?: Enumerable<FinanceiroScalarWhereInput>
    OR?: Enumerable<FinanceiroScalarWhereInput>
    NOT?: Enumerable<FinanceiroScalarWhereInput>
    fin_id?: IntFilter | number
    Cliente_id?: IntFilter | number
    documentoDoc_controle?: IntFilter | number
    usuarioId?: IntFilter | number
    dt_create?: DateTimeFilter | Date | string
    dt_vencimento?: DateTimeFilter | Date | string
    pago?: BoolFilter | boolean
    cancelado?: BoolFilter | boolean
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type Fin_pagoUpsertWithWhereUniqueWithoutUserInput = {
    where: Fin_pagoWhereUniqueInput
    update: XOR<Fin_pagoUpdateWithoutUserInput, Fin_pagoUncheckedUpdateWithoutUserInput>
    create: XOR<Fin_pagoCreateWithoutUserInput, Fin_pagoUncheckedCreateWithoutUserInput>
  }

  export type Fin_pagoUpdateWithWhereUniqueWithoutUserInput = {
    where: Fin_pagoWhereUniqueInput
    data: XOR<Fin_pagoUpdateWithoutUserInput, Fin_pagoUncheckedUpdateWithoutUserInput>
  }

  export type Fin_pagoUpdateManyWithWhereWithoutUserInput = {
    where: Fin_pagoScalarWhereInput
    data: XOR<Fin_pagoUpdateManyMutationInput, Fin_pagoUncheckedUpdateManyWithoutFin_pagoInput>
  }

  export type Fin_pagoScalarWhereInput = {
    AND?: Enumerable<Fin_pagoScalarWhereInput>
    OR?: Enumerable<Fin_pagoScalarWhereInput>
    NOT?: Enumerable<Fin_pagoScalarWhereInput>
    pago_id?: IntFilter | number
    Fin_id?: IntFilter | number
    usuarioId?: IntFilter | number
    dt_pago?: DateTimeFilter | Date | string
    val_desc?: DecimalFilter | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type DocumentoUpsertWithWhereUniqueWithoutUserInput = {
    where: DocumentoWhereUniqueInput
    update: XOR<DocumentoUpdateWithoutUserInput, DocumentoUncheckedUpdateWithoutUserInput>
    create: XOR<DocumentoCreateWithoutUserInput, DocumentoUncheckedCreateWithoutUserInput>
  }

  export type DocumentoUpdateWithWhereUniqueWithoutUserInput = {
    where: DocumentoWhereUniqueInput
    data: XOR<DocumentoUpdateWithoutUserInput, DocumentoUncheckedUpdateWithoutUserInput>
  }

  export type DocumentoUpdateManyWithWhereWithoutUserInput = {
    where: DocumentoScalarWhereInput
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyWithoutDocumentoInput>
  }

  export type DocumentoScalarWhereInput = {
    AND?: Enumerable<DocumentoScalarWhereInput>
    OR?: Enumerable<DocumentoScalarWhereInput>
    NOT?: Enumerable<DocumentoScalarWhereInput>
    doc_controle?: IntFilter | number
    usuarioId?: IntFilter | number
    id_cliente?: IntFilter | number
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    contaId_conta?: IntFilter | number
  }

  export type DocumentoCreateWithoutContaInput = {
    doc_controle: number
    id_cliente: number
    valor: Decimal | DecimalJsLike | number | string
    Financeiro?: FinanceiroCreateNestedManyWithoutDocumentoInput
    user: UsuarioCreateNestedOneWithoutDocumentoInput
  }

  export type DocumentoUncheckedCreateWithoutContaInput = {
    doc_controle: number
    usuarioId: number
    id_cliente: number
    valor: Decimal | DecimalJsLike | number | string
    Financeiro?: FinanceiroUncheckedCreateNestedManyWithoutDocumentoInput
  }

  export type DocumentoCreateOrConnectWithoutContaInput = {
    where: DocumentoWhereUniqueInput
    create: XOR<DocumentoCreateWithoutContaInput, DocumentoUncheckedCreateWithoutContaInput>
  }

  export type DocumentoUpsertWithWhereUniqueWithoutContaInput = {
    where: DocumentoWhereUniqueInput
    update: XOR<DocumentoUpdateWithoutContaInput, DocumentoUncheckedUpdateWithoutContaInput>
    create: XOR<DocumentoCreateWithoutContaInput, DocumentoUncheckedCreateWithoutContaInput>
  }

  export type DocumentoUpdateWithWhereUniqueWithoutContaInput = {
    where: DocumentoWhereUniqueInput
    data: XOR<DocumentoUpdateWithoutContaInput, DocumentoUncheckedUpdateWithoutContaInput>
  }

  export type DocumentoUpdateManyWithWhereWithoutContaInput = {
    where: DocumentoScalarWhereInput
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyWithoutDocumentoInput>
  }

  export type FinanceiroCreateWithoutDocumentoInput = {
    dt_create?: Date | string
    dt_vencimento: Date | string
    pago?: boolean
    cancelado?: boolean
    valor: Decimal | DecimalJsLike | number | string
    user: UsuarioCreateNestedOneWithoutFinanceiroInput
    cliente: clienteCreateNestedOneWithoutFinanceiroInput
    Fin_pago?: Fin_pagoCreateNestedManyWithoutFinanceiroInput
  }

  export type FinanceiroUncheckedCreateWithoutDocumentoInput = {
    fin_id?: number
    Cliente_id: number
    usuarioId: number
    dt_create?: Date | string
    dt_vencimento: Date | string
    pago?: boolean
    cancelado?: boolean
    valor: Decimal | DecimalJsLike | number | string
    Fin_pago?: Fin_pagoUncheckedCreateNestedManyWithoutFinanceiroInput
  }

  export type FinanceiroCreateOrConnectWithoutDocumentoInput = {
    where: FinanceiroWhereUniqueInput
    create: XOR<FinanceiroCreateWithoutDocumentoInput, FinanceiroUncheckedCreateWithoutDocumentoInput>
  }

  export type UsuarioCreateWithoutDocumentoInput = {
    nome: string
    senha: string
    Financeiro?: FinanceiroCreateNestedManyWithoutUserInput
    Fin_pago?: Fin_pagoCreateNestedManyWithoutUserInput
  }

  export type UsuarioUncheckedCreateWithoutDocumentoInput = {
    id?: number
    nome: string
    senha: string
    Financeiro?: FinanceiroUncheckedCreateNestedManyWithoutUserInput
    Fin_pago?: Fin_pagoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsuarioCreateOrConnectWithoutDocumentoInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutDocumentoInput, UsuarioUncheckedCreateWithoutDocumentoInput>
  }

  export type ContaCreateWithoutDocumentoInput = {
    id_conta: number
    nome: string
    Saldo: Decimal | DecimalJsLike | number | string
  }

  export type ContaUncheckedCreateWithoutDocumentoInput = {
    id_conta: number
    nome: string
    Saldo: Decimal | DecimalJsLike | number | string
  }

  export type ContaCreateOrConnectWithoutDocumentoInput = {
    where: ContaWhereUniqueInput
    create: XOR<ContaCreateWithoutDocumentoInput, ContaUncheckedCreateWithoutDocumentoInput>
  }

  export type FinanceiroUpsertWithWhereUniqueWithoutDocumentoInput = {
    where: FinanceiroWhereUniqueInput
    update: XOR<FinanceiroUpdateWithoutDocumentoInput, FinanceiroUncheckedUpdateWithoutDocumentoInput>
    create: XOR<FinanceiroCreateWithoutDocumentoInput, FinanceiroUncheckedCreateWithoutDocumentoInput>
  }

  export type FinanceiroUpdateWithWhereUniqueWithoutDocumentoInput = {
    where: FinanceiroWhereUniqueInput
    data: XOR<FinanceiroUpdateWithoutDocumentoInput, FinanceiroUncheckedUpdateWithoutDocumentoInput>
  }

  export type FinanceiroUpdateManyWithWhereWithoutDocumentoInput = {
    where: FinanceiroScalarWhereInput
    data: XOR<FinanceiroUpdateManyMutationInput, FinanceiroUncheckedUpdateManyWithoutFinanceiroInput>
  }

  export type UsuarioUpsertWithoutDocumentoInput = {
    update: XOR<UsuarioUpdateWithoutDocumentoInput, UsuarioUncheckedUpdateWithoutDocumentoInput>
    create: XOR<UsuarioCreateWithoutDocumentoInput, UsuarioUncheckedCreateWithoutDocumentoInput>
  }

  export type UsuarioUpdateWithoutDocumentoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Financeiro?: FinanceiroUpdateManyWithoutUserNestedInput
    Fin_pago?: Fin_pagoUpdateManyWithoutUserNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutDocumentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Financeiro?: FinanceiroUncheckedUpdateManyWithoutUserNestedInput
    Fin_pago?: Fin_pagoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ContaUpsertWithoutDocumentoInput = {
    update: XOR<ContaUpdateWithoutDocumentoInput, ContaUncheckedUpdateWithoutDocumentoInput>
    create: XOR<ContaCreateWithoutDocumentoInput, ContaUncheckedCreateWithoutDocumentoInput>
  }

  export type ContaUpdateWithoutDocumentoInput = {
    id_conta?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    Saldo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ContaUncheckedUpdateWithoutDocumentoInput = {
    id_conta?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    Saldo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type FinanceiroCreateWithoutClienteInput = {
    dt_create?: Date | string
    dt_vencimento: Date | string
    pago?: boolean
    cancelado?: boolean
    valor: Decimal | DecimalJsLike | number | string
    documento: DocumentoCreateNestedOneWithoutFinanceiroInput
    user: UsuarioCreateNestedOneWithoutFinanceiroInput
    Fin_pago?: Fin_pagoCreateNestedManyWithoutFinanceiroInput
  }

  export type FinanceiroUncheckedCreateWithoutClienteInput = {
    fin_id?: number
    documentoDoc_controle: number
    usuarioId: number
    dt_create?: Date | string
    dt_vencimento: Date | string
    pago?: boolean
    cancelado?: boolean
    valor: Decimal | DecimalJsLike | number | string
    Fin_pago?: Fin_pagoUncheckedCreateNestedManyWithoutFinanceiroInput
  }

  export type FinanceiroCreateOrConnectWithoutClienteInput = {
    where: FinanceiroWhereUniqueInput
    create: XOR<FinanceiroCreateWithoutClienteInput, FinanceiroUncheckedCreateWithoutClienteInput>
  }

  export type FinanceiroUpsertWithWhereUniqueWithoutClienteInput = {
    where: FinanceiroWhereUniqueInput
    update: XOR<FinanceiroUpdateWithoutClienteInput, FinanceiroUncheckedUpdateWithoutClienteInput>
    create: XOR<FinanceiroCreateWithoutClienteInput, FinanceiroUncheckedCreateWithoutClienteInput>
  }

  export type FinanceiroUpdateWithWhereUniqueWithoutClienteInput = {
    where: FinanceiroWhereUniqueInput
    data: XOR<FinanceiroUpdateWithoutClienteInput, FinanceiroUncheckedUpdateWithoutClienteInput>
  }

  export type FinanceiroUpdateManyWithWhereWithoutClienteInput = {
    where: FinanceiroScalarWhereInput
    data: XOR<FinanceiroUpdateManyMutationInput, FinanceiroUncheckedUpdateManyWithoutFinanceiroInput>
  }

  export type DocumentoCreateWithoutFinanceiroInput = {
    doc_controle: number
    id_cliente: number
    valor: Decimal | DecimalJsLike | number | string
    user: UsuarioCreateNestedOneWithoutDocumentoInput
    conta: ContaCreateNestedOneWithoutDocumentoInput
  }

  export type DocumentoUncheckedCreateWithoutFinanceiroInput = {
    doc_controle: number
    usuarioId: number
    id_cliente: number
    valor: Decimal | DecimalJsLike | number | string
    contaId_conta: number
  }

  export type DocumentoCreateOrConnectWithoutFinanceiroInput = {
    where: DocumentoWhereUniqueInput
    create: XOR<DocumentoCreateWithoutFinanceiroInput, DocumentoUncheckedCreateWithoutFinanceiroInput>
  }

  export type UsuarioCreateWithoutFinanceiroInput = {
    nome: string
    senha: string
    Fin_pago?: Fin_pagoCreateNestedManyWithoutUserInput
    Documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UsuarioUncheckedCreateWithoutFinanceiroInput = {
    id?: number
    nome: string
    senha: string
    Fin_pago?: Fin_pagoUncheckedCreateNestedManyWithoutUserInput
    Documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsuarioCreateOrConnectWithoutFinanceiroInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutFinanceiroInput, UsuarioUncheckedCreateWithoutFinanceiroInput>
  }

  export type clienteCreateWithoutFinanceiroInput = {
    cpfCnpj: string
    email: string
    nome: string
    telefone: string
    endereco: string
    numero: number
  }

  export type clienteUncheckedCreateWithoutFinanceiroInput = {
    cliente_id?: number
    cpfCnpj: string
    email: string
    nome: string
    telefone: string
    endereco: string
    numero: number
  }

  export type clienteCreateOrConnectWithoutFinanceiroInput = {
    where: clienteWhereUniqueInput
    create: XOR<clienteCreateWithoutFinanceiroInput, clienteUncheckedCreateWithoutFinanceiroInput>
  }

  export type Fin_pagoCreateWithoutFinanceiroInput = {
    dt_pago?: Date | string
    val_desc: Decimal | DecimalJsLike | number | string
    val_juros: Decimal | DecimalJsLike | number | string
    user: UsuarioCreateNestedOneWithoutFin_pagoInput
  }

  export type Fin_pagoUncheckedCreateWithoutFinanceiroInput = {
    pago_id?: number
    usuarioId: number
    dt_pago?: Date | string
    val_desc: Decimal | DecimalJsLike | number | string
    val_juros: Decimal | DecimalJsLike | number | string
  }

  export type Fin_pagoCreateOrConnectWithoutFinanceiroInput = {
    where: Fin_pagoWhereUniqueInput
    create: XOR<Fin_pagoCreateWithoutFinanceiroInput, Fin_pagoUncheckedCreateWithoutFinanceiroInput>
  }

  export type DocumentoUpsertWithoutFinanceiroInput = {
    update: XOR<DocumentoUpdateWithoutFinanceiroInput, DocumentoUncheckedUpdateWithoutFinanceiroInput>
    create: XOR<DocumentoCreateWithoutFinanceiroInput, DocumentoUncheckedCreateWithoutFinanceiroInput>
  }

  export type DocumentoUpdateWithoutFinanceiroInput = {
    doc_controle?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user?: UsuarioUpdateOneRequiredWithoutDocumentoNestedInput
    conta?: ContaUpdateOneRequiredWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateWithoutFinanceiroInput = {
    doc_controle?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    contaId_conta?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioUpsertWithoutFinanceiroInput = {
    update: XOR<UsuarioUpdateWithoutFinanceiroInput, UsuarioUncheckedUpdateWithoutFinanceiroInput>
    create: XOR<UsuarioCreateWithoutFinanceiroInput, UsuarioUncheckedCreateWithoutFinanceiroInput>
  }

  export type UsuarioUpdateWithoutFinanceiroInput = {
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Fin_pago?: Fin_pagoUpdateManyWithoutUserNestedInput
    Documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutFinanceiroInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Fin_pago?: Fin_pagoUncheckedUpdateManyWithoutUserNestedInput
    Documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type clienteUpsertWithoutFinanceiroInput = {
    update: XOR<clienteUpdateWithoutFinanceiroInput, clienteUncheckedUpdateWithoutFinanceiroInput>
    create: XOR<clienteCreateWithoutFinanceiroInput, clienteUncheckedCreateWithoutFinanceiroInput>
  }

  export type clienteUpdateWithoutFinanceiroInput = {
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
  }

  export type clienteUncheckedUpdateWithoutFinanceiroInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
  }

  export type Fin_pagoUpsertWithWhereUniqueWithoutFinanceiroInput = {
    where: Fin_pagoWhereUniqueInput
    update: XOR<Fin_pagoUpdateWithoutFinanceiroInput, Fin_pagoUncheckedUpdateWithoutFinanceiroInput>
    create: XOR<Fin_pagoCreateWithoutFinanceiroInput, Fin_pagoUncheckedCreateWithoutFinanceiroInput>
  }

  export type Fin_pagoUpdateWithWhereUniqueWithoutFinanceiroInput = {
    where: Fin_pagoWhereUniqueInput
    data: XOR<Fin_pagoUpdateWithoutFinanceiroInput, Fin_pagoUncheckedUpdateWithoutFinanceiroInput>
  }

  export type Fin_pagoUpdateManyWithWhereWithoutFinanceiroInput = {
    where: Fin_pagoScalarWhereInput
    data: XOR<Fin_pagoUpdateManyMutationInput, Fin_pagoUncheckedUpdateManyWithoutFin_pagoInput>
  }

  export type FinanceiroCreateWithoutFin_pagoInput = {
    dt_create?: Date | string
    dt_vencimento: Date | string
    pago?: boolean
    cancelado?: boolean
    valor: Decimal | DecimalJsLike | number | string
    documento: DocumentoCreateNestedOneWithoutFinanceiroInput
    user: UsuarioCreateNestedOneWithoutFinanceiroInput
    cliente: clienteCreateNestedOneWithoutFinanceiroInput
  }

  export type FinanceiroUncheckedCreateWithoutFin_pagoInput = {
    fin_id?: number
    Cliente_id: number
    documentoDoc_controle: number
    usuarioId: number
    dt_create?: Date | string
    dt_vencimento: Date | string
    pago?: boolean
    cancelado?: boolean
    valor: Decimal | DecimalJsLike | number | string
  }

  export type FinanceiroCreateOrConnectWithoutFin_pagoInput = {
    where: FinanceiroWhereUniqueInput
    create: XOR<FinanceiroCreateWithoutFin_pagoInput, FinanceiroUncheckedCreateWithoutFin_pagoInput>
  }

  export type UsuarioCreateWithoutFin_pagoInput = {
    nome: string
    senha: string
    Financeiro?: FinanceiroCreateNestedManyWithoutUserInput
    Documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UsuarioUncheckedCreateWithoutFin_pagoInput = {
    id?: number
    nome: string
    senha: string
    Financeiro?: FinanceiroUncheckedCreateNestedManyWithoutUserInput
    Documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsuarioCreateOrConnectWithoutFin_pagoInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutFin_pagoInput, UsuarioUncheckedCreateWithoutFin_pagoInput>
  }

  export type FinanceiroUpsertWithoutFin_pagoInput = {
    update: XOR<FinanceiroUpdateWithoutFin_pagoInput, FinanceiroUncheckedUpdateWithoutFin_pagoInput>
    create: XOR<FinanceiroCreateWithoutFin_pagoInput, FinanceiroUncheckedCreateWithoutFin_pagoInput>
  }

  export type FinanceiroUpdateWithoutFin_pagoInput = {
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    documento?: DocumentoUpdateOneRequiredWithoutFinanceiroNestedInput
    user?: UsuarioUpdateOneRequiredWithoutFinanceiroNestedInput
    cliente?: clienteUpdateOneRequiredWithoutFinanceiroNestedInput
  }

  export type FinanceiroUncheckedUpdateWithoutFin_pagoInput = {
    fin_id?: IntFieldUpdateOperationsInput | number
    Cliente_id?: IntFieldUpdateOperationsInput | number
    documentoDoc_controle?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type UsuarioUpsertWithoutFin_pagoInput = {
    update: XOR<UsuarioUpdateWithoutFin_pagoInput, UsuarioUncheckedUpdateWithoutFin_pagoInput>
    create: XOR<UsuarioCreateWithoutFin_pagoInput, UsuarioUncheckedCreateWithoutFin_pagoInput>
  }

  export type UsuarioUpdateWithoutFin_pagoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Financeiro?: FinanceiroUpdateManyWithoutUserNestedInput
    Documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutFin_pagoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    Financeiro?: FinanceiroUncheckedUpdateManyWithoutUserNestedInput
    Documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FinanceiroUpdateWithoutUserInput = {
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    documento?: DocumentoUpdateOneRequiredWithoutFinanceiroNestedInput
    cliente?: clienteUpdateOneRequiredWithoutFinanceiroNestedInput
    Fin_pago?: Fin_pagoUpdateManyWithoutFinanceiroNestedInput
  }

  export type FinanceiroUncheckedUpdateWithoutUserInput = {
    fin_id?: IntFieldUpdateOperationsInput | number
    Cliente_id?: IntFieldUpdateOperationsInput | number
    documentoDoc_controle?: IntFieldUpdateOperationsInput | number
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fin_pago?: Fin_pagoUncheckedUpdateManyWithoutFinanceiroNestedInput
  }

  export type FinanceiroUncheckedUpdateManyWithoutFinanceiroInput = {
    fin_id?: IntFieldUpdateOperationsInput | number
    Cliente_id?: IntFieldUpdateOperationsInput | number
    documentoDoc_controle?: IntFieldUpdateOperationsInput | number
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type Fin_pagoUpdateWithoutUserInput = {
    dt_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    val_desc?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    financeiro?: FinanceiroUpdateOneRequiredWithoutFin_pagoNestedInput
  }

  export type Fin_pagoUncheckedUpdateWithoutUserInput = {
    pago_id?: IntFieldUpdateOperationsInput | number
    Fin_id?: IntFieldUpdateOperationsInput | number
    dt_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    val_desc?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type Fin_pagoUncheckedUpdateManyWithoutFin_pagoInput = {
    pago_id?: IntFieldUpdateOperationsInput | number
    Fin_id?: IntFieldUpdateOperationsInput | number
    dt_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    val_desc?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type DocumentoUpdateWithoutUserInput = {
    doc_controle?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Financeiro?: FinanceiroUpdateManyWithoutDocumentoNestedInput
    conta?: ContaUpdateOneRequiredWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateWithoutUserInput = {
    doc_controle?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    contaId_conta?: IntFieldUpdateOperationsInput | number
    Financeiro?: FinanceiroUncheckedUpdateManyWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateManyWithoutDocumentoInput = {
    doc_controle?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    contaId_conta?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentoUpdateWithoutContaInput = {
    doc_controle?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Financeiro?: FinanceiroUpdateManyWithoutDocumentoNestedInput
    user?: UsuarioUpdateOneRequiredWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateWithoutContaInput = {
    doc_controle?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    id_cliente?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Financeiro?: FinanceiroUncheckedUpdateManyWithoutDocumentoNestedInput
  }

  export type FinanceiroUpdateWithoutDocumentoInput = {
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user?: UsuarioUpdateOneRequiredWithoutFinanceiroNestedInput
    cliente?: clienteUpdateOneRequiredWithoutFinanceiroNestedInput
    Fin_pago?: Fin_pagoUpdateManyWithoutFinanceiroNestedInput
  }

  export type FinanceiroUncheckedUpdateWithoutDocumentoInput = {
    fin_id?: IntFieldUpdateOperationsInput | number
    Cliente_id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fin_pago?: Fin_pagoUncheckedUpdateManyWithoutFinanceiroNestedInput
  }

  export type FinanceiroUpdateWithoutClienteInput = {
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    documento?: DocumentoUpdateOneRequiredWithoutFinanceiroNestedInput
    user?: UsuarioUpdateOneRequiredWithoutFinanceiroNestedInput
    Fin_pago?: Fin_pagoUpdateManyWithoutFinanceiroNestedInput
  }

  export type FinanceiroUncheckedUpdateWithoutClienteInput = {
    fin_id?: IntFieldUpdateOperationsInput | number
    documentoDoc_controle?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    dt_create?: DateTimeFieldUpdateOperationsInput | Date | string
    dt_vencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pago?: BoolFieldUpdateOperationsInput | boolean
    cancelado?: BoolFieldUpdateOperationsInput | boolean
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fin_pago?: Fin_pagoUncheckedUpdateManyWithoutFinanceiroNestedInput
  }

  export type Fin_pagoUpdateWithoutFinanceiroInput = {
    dt_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    val_desc?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user?: UsuarioUpdateOneRequiredWithoutFin_pagoNestedInput
  }

  export type Fin_pagoUncheckedUpdateWithoutFinanceiroInput = {
    pago_id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    dt_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    val_desc?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    val_juros?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}